
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'progID PR_Program PR_Write PR_and PR_bool PR_cos PR_cosinv PR_cossecat PR_cotengent PR_degree PR_display PR_else PR_false PR_float PR_fun PR_globalVar PR_graph PR_if PR_int PR_main PR_mapmat PR_normalizar PR_or PR_rad PR_read PR_secant PR_seninv PR_sin PR_tan PR_taninv PR_true PR_var PR_void PR_while TOKEN_ASIGNA TOKEN_COMPARA TOKEN_DIVID TOKEN_MAYOR TOKEN_MAYOR_IG TOKEN_MENOR TOKEN_MENOR_IG TOKEN_MULTI TOKEN_NO_IGUAL TOKEN_POW Token_And Token_Coma Token_Corchete_Abierto Token_Corchete_Cerrado Token_Entero Token_Float Token_Llave_Abierta Token_Llave_Cerrado Token_Or Token_Parent_Abierto Token_Parent_Cerrado Token_Punto_Coma Token_Resta Token_SUMA Token_Single_Digprog : PR_Program Token_Llave_Abierta globalVar BlockFun  MainBlock Token_Llave_Cerradotipo : PR_int\n\t\t\t| PR_float\n\t\t\t| PR_bool \n\t\t\t| PR_void\n\t\t\t| PR_rad\n\t\t\t| PR_degree \n\t\t\tglobalVar : PR_globalVar tipo decVar Token_Punto_Coma globalVar\n\t\t\t\t   | empty\n      var : PR_var tipo decVar Token_Punto_ComadecVar : varNom decVar2\n    \t\tdecVar2 : Token_Coma decVar\n\t\t\t   | empty\n\tvarNom : ID arr1\n\t \tarr1 : Token_Corchete_Abierto Token_Entero Token_Corchete_Cerrado arr2\n\t \t     | empty\n\t \tarr2 : Token_Corchete_Abierto Token_Entero Token_Corchete_Cerrado\n\t \t     | empty\n\t\t        BlockFun : fun BlockFun\n\t              | empty\n\t              fun : PR_fun tipo ID Token_Parent_Abierto params Token_Parent_Cerrado funBlockparams : tipo ID\n\t        | tipo ID Token_Coma params\n\t\t\t| emptyfunBlock : Token_Llave_Abierta bloque Token_Llave_CerradofunCall : ID Token_Parent_Abierto paramsCall Token_Parent_Cerrado funCallVoid : ID Token_Parent_Abierto paramsCall Token_Parent_Cerrado Token_Punto_ComaparamsCall : SuperExp\n\t        | SuperExp Token_Coma paramsCall\n\t\t\t| emptyMainBlock : PR_main Token_Llave_Abierta bloque Token_Llave_Cerradoempty :bloque : statements bloque\n\t       |  empty statements : var \n\t              | funCallVoid\n\t              | Conditions\n\t              | ciclos\n\t              | asigna\n\t              | read \n\t              | write\n\t              | GRAPH\n\t              | map\n\t              | NORMALIZARSuperExp : Exp\n\t            | Exp PR_and CuadruploOpp SuperExp\n\t            | Exp PR_or CuadruploOpp SuperExp\n\t            | Exp Token_And CuadruploOpp SuperExp\n\t            | Exp Token_Or CuadruploOpp SuperExp  Exp : miniExp \n\t        | miniExp TOKEN_MAYOR CuadruploOpp miniExp\n\t        | miniExp TOKEN_MENOR CuadruploOpp miniExp\n\t        | miniExp TOKEN_MAYOR_IG CuadruploOpp miniExp\n\t        | miniExp TOKEN_MENOR_IG CuadruploOpp miniExp\n\t        | miniExp TOKEN_COMPARA CuadruploOpp miniExp\n\t        | miniExp TOKEN_NO_IGUAL CuadruploOpp miniExpminiExp : microExp CuadruplosCrea \n\t           | microExp CuadruplosCrea Token_SUMA CuadruploOpp miniExp\n\t           | microExp CuadruplosCrea Token_Resta CuadruploOpp miniExpmicroExp : minimicroExp CuadruplosCreaMult \n\t           | minimicroExp  CuadruplosCreaMult TOKEN_MULTI CuadruploOpp microExp\n\t           |  minimicroExp CuadruplosCreaMult  TOKEN_DIVID CuadruploOpp microExpminimicroExp : conjunto CuadruplosCreaPow\n\t           | conjunto CuadruplosCreaPow  TOKEN_POW CuadruploOpp minimicroExp conjunto : ID CuadruploMiniExp\n\t           | ID Token_Corchete_Abierto miniExp Token_Corchete_Cerrado\n\t           | ID Token_Corchete_Abierto miniExp Token_Corchete_Cerrado Token_Corchete_Abierto miniExp Token_Corchete_Cerrado\n\t           | Token_Entero CuadruploMiniExp\n\t           | Token_Float CuadruploMiniExp\n\t           | PR_true\n\t           | PR_false\n\t           | funCall \n\t           | llamadaCuadruploMiniExp : emptyCuadruploOpp : emptyCuadruplosCrea : emptyCuadruplosCreaMult : emptyCuadruplosCreaPow : emptyConditions : PR_if Token_Parent_Abierto SuperExp Token_Parent_Cerrado Token_Llave_Abierta bloque Token_Llave_Cerrado PR_else Token_Llave_Abierta bloque Token_Llave_Cerradociclos : PR_while Token_Parent_Abierto SuperExp Token_Parent_Cerrado Token_Llave_Abierta bloque Token_Llave_Cerradoasigna : ID TOKEN_ASIGNA SuperExp Token_Punto_Coma\n      | ID Token_Corchete_Abierto miniExp Token_Corchete_Cerrado TOKEN_ASIGNA SuperExp Token_Punto_Coma\n      | ID Token_Corchete_Abierto miniExp Token_Corchete_Cerrado Token_Corchete_Abierto miniExp Token_Corchete_Cerrado TOKEN_ASIGNA SuperExp Token_Punto_Coma  llamada : sin\n\t            | cos\n\t            | tan\n\t            | COTANGENT\n\t            | COSECANT\n\t            | SECANT\n\t            | sininv\n\t            | cosinv\n\t            | taninv sin : PR_sin Token_Parent_Abierto SuperExp Token_Parent_Cerradocos : PR_cos Token_Parent_Abierto SuperExp Token_Parent_Cerradotan : PR_tan Token_Parent_Abierto SuperExp Token_Parent_CerradoCOTANGENT : PR_cotengent Token_Parent_Abierto SuperExp Token_Parent_CerradoCOSECANT : PR_cossecat Token_Parent_Abierto SuperExp Token_Parent_CerradoSECANT : PR_secant Token_Parent_Abierto SuperExp Token_Parent_Cerradosininv : PR_seninv Token_Parent_Abierto SuperExp Token_Parent_Cerradocosinv : PR_cosinv Token_Parent_Abierto SuperExp Token_Parent_Cerradotaninv : PR_taninv Token_Parent_Abierto SuperExp Token_Parent_Cerradowrite : PR_Write Token_Parent_Abierto ID Token_Parent_Cerrado Token_Punto_Coma\n\t           | PR_Write Token_Parent_Abierto ID  Token_Corchete_Abierto SuperExp Token_Corchete_Cerrado Token_Parent_Cerrado Token_Punto_Coma\n\t           | PR_Write Token_Parent_Abierto ID Token_Corchete_Abierto miniExp Token_Corchete_Cerrado Token_Corchete_Abierto miniExp Token_Corchete_Cerrado Token_Parent_Cerrado Token_Punto_Comaread : PR_read Token_Parent_Abierto SuperExp Token_Parent_Cerrado Token_Punto_ComaGRAPH : PR_graph Token_Parent_Abierto SuperExp Token_Parent_Cerrado Token_Punto_ComaNORMALIZAR : PR_normalizar Token_Parent_Abierto SuperExp Token_Parent_Cerrado Token_Punto_Comamap : PR_mapmat Token_Parent_Abierto SuperExp Token_Parent_Cerrado Token_Punto_Coma'
    
_lr_action_items = {'PR_Program':([0,],[2,]),'$end':([1,25,],[0,-1,]),'Token_Llave_Abierta':([2,19,122,162,163,264,],[3,26,172,205,206,269,]),'PR_globalVar':([3,28,],[5,5,]),'PR_fun':([3,4,6,8,28,58,171,249,],[-32,10,-9,10,-32,-8,-21,-25,]),'PR_main':([3,4,6,7,8,9,20,28,58,171,249,],[-32,-32,-9,19,-32,-20,-19,-32,-8,-21,-25,]),'PR_int':([5,10,48,57,170,],[12,12,12,12,12,]),'PR_float':([5,10,48,57,170,],[13,13,13,13,13,]),'PR_bool':([5,10,48,57,170,],[14,14,14,14,14,]),'PR_void':([5,10,48,57,170,],[15,15,15,15,15,]),'PR_rad':([5,10,48,57,170,],[16,16,16,16,16,]),'PR_degree':([5,10,48,57,170,],[17,17,17,17,17,]),'ID':([11,12,13,14,15,16,17,21,26,30,36,38,39,40,41,42,43,44,45,46,47,63,64,65,66,67,68,69,70,71,72,73,74,126,128,129,132,133,134,135,136,137,138,139,140,141,142,151,152,153,154,155,156,157,158,159,160,166,172,176,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,203,204,205,206,207,208,211,212,213,229,230,231,232,233,250,257,259,261,263,265,269,271,274,275,],[24,-2,-3,-4,-5,-6,-7,27,49,24,49,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,24,79,79,79,79,79,79,117,79,79,79,121,-10,79,79,79,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,79,79,79,79,79,79,79,79,79,-81,79,49,-27,79,-75,79,79,79,79,79,79,79,79,79,-32,-32,-32,-32,-32,79,79,49,49,-105,-102,-106,-108,-107,79,79,79,79,79,79,-82,-80,79,79,-103,49,-83,-79,-104,]),'Token_Llave_Cerrado':([18,26,35,36,37,38,39,40,41,42,43,44,45,46,47,61,62,126,160,172,176,205,206,207,208,211,212,213,215,245,246,257,259,265,269,271,272,274,275,],[25,-32,61,-32,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-31,-33,-10,-81,-32,-27,-32,-32,-105,-102,-106,-108,-107,249,258,259,-82,-80,-103,-32,-83,274,-79,-104,]),'Token_Punto_Coma':([22,23,24,29,31,32,34,59,77,78,79,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,112,124,125,127,130,131,143,144,145,146,147,148,149,150,164,165,167,168,169,216,217,218,219,220,221,222,223,224,225,226,227,228,234,235,236,237,238,239,240,241,242,244,251,252,253,254,255,260,267,268,273,],[28,-32,-32,-11,-13,-14,-16,-12,-32,126,-32,-45,-50,-32,-32,-32,-32,-32,-70,-71,-72,-73,-84,-85,-86,-87,-88,-89,-90,-91,-92,160,-15,-18,-65,-74,176,-57,-76,-60,-77,-63,-78,-68,-69,207,208,211,212,213,-17,-66,-26,-46,-47,-48,-49,-51,-52,-53,-54,-55,-56,-93,-94,-95,-96,-97,-98,-99,-100,-101,257,-58,-59,-61,-62,-64,265,-67,271,275,]),'Token_Coma':([23,24,32,34,77,79,81,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,121,124,125,127,130,143,144,145,146,147,148,149,150,216,217,218,219,220,221,222,223,224,225,226,227,228,234,235,236,237,238,239,240,241,242,251,252,253,254,255,267,],[30,-32,-14,-16,-32,-32,132,-45,-50,-32,-32,-32,-32,-32,-70,-71,-72,-73,-84,-85,-86,-87,-88,-89,-90,-91,-92,170,-15,-18,-65,-74,-57,-76,-60,-77,-63,-78,-68,-69,-17,-66,-26,-46,-47,-48,-49,-51,-52,-53,-54,-55,-56,-93,-94,-95,-96,-97,-98,-99,-100,-101,-58,-59,-61,-62,-64,-67,]),'Token_Corchete_Abierto':([24,49,77,79,117,161,217,248,],[33,66,123,128,166,203,250,261,]),'PR_var':([26,36,38,39,40,41,42,43,44,45,46,47,126,160,172,176,205,206,207,208,211,212,213,257,259,265,269,271,274,275,],[48,48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-10,-81,48,-27,48,48,-105,-102,-106,-108,-107,-82,-80,-103,48,-83,-79,-104,]),'PR_if':([26,36,38,39,40,41,42,43,44,45,46,47,126,160,172,176,205,206,207,208,211,212,213,257,259,265,269,271,274,275,],[50,50,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-10,-81,50,-27,50,50,-105,-102,-106,-108,-107,-82,-80,-103,50,-83,-79,-104,]),'PR_while':([26,36,38,39,40,41,42,43,44,45,46,47,126,160,172,176,205,206,207,208,211,212,213,257,259,265,269,271,274,275,],[51,51,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-10,-81,51,-27,51,51,-105,-102,-106,-108,-107,-82,-80,-103,51,-83,-79,-104,]),'PR_read':([26,36,38,39,40,41,42,43,44,45,46,47,126,160,172,176,205,206,207,208,211,212,213,257,259,265,269,271,274,275,],[52,52,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-10,-81,52,-27,52,52,-105,-102,-106,-108,-107,-82,-80,-103,52,-83,-79,-104,]),'PR_Write':([26,36,38,39,40,41,42,43,44,45,46,47,126,160,172,176,205,206,207,208,211,212,213,257,259,265,269,271,274,275,],[53,53,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-10,-81,53,-27,53,53,-105,-102,-106,-108,-107,-82,-80,-103,53,-83,-79,-104,]),'PR_graph':([26,36,38,39,40,41,42,43,44,45,46,47,126,160,172,176,205,206,207,208,211,212,213,257,259,265,269,271,274,275,],[54,54,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-10,-81,54,-27,54,54,-105,-102,-106,-108,-107,-82,-80,-103,54,-83,-79,-104,]),'PR_mapmat':([26,36,38,39,40,41,42,43,44,45,46,47,126,160,172,176,205,206,207,208,211,212,213,257,259,265,269,271,274,275,],[55,55,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-10,-81,55,-27,55,55,-105,-102,-106,-108,-107,-82,-80,-103,55,-83,-79,-104,]),'PR_normalizar':([26,36,38,39,40,41,42,43,44,45,46,47,126,160,172,176,205,206,207,208,211,212,213,257,259,265,269,271,274,275,],[56,56,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-10,-81,56,-27,56,56,-105,-102,-106,-108,-107,-82,-80,-103,56,-83,-79,-104,]),'Token_Parent_Abierto':([27,49,50,51,52,53,54,55,56,79,103,104,105,106,107,108,109,110,111,],[57,64,67,68,69,70,71,72,73,129,151,152,153,154,155,156,157,158,159,]),'Token_Entero':([33,64,65,66,67,68,69,71,72,73,123,128,129,132,133,134,135,136,137,138,139,140,141,142,151,152,153,154,155,156,157,158,159,166,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,203,204,229,230,231,232,233,250,261,263,],[60,88,88,88,88,88,88,88,88,88,173,88,88,88,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,88,88,88,88,88,88,88,88,88,88,88,-75,88,88,88,88,88,88,88,88,88,-32,-32,-32,-32,-32,88,88,88,88,88,88,88,88,88,88,]),'TOKEN_ASIGNA':([49,161,256,],[65,204,263,]),'Token_Parent_Cerrado':([57,64,75,76,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,114,115,116,117,118,119,120,121,127,129,130,132,143,144,145,146,147,148,149,150,170,175,177,194,195,196,197,198,199,200,201,202,214,217,218,219,220,221,222,223,224,225,226,227,228,234,235,236,237,238,239,240,241,242,247,251,252,253,254,255,267,270,],[-32,-32,122,-24,-32,131,-28,-30,-45,-50,-32,-32,-32,-32,-32,-70,-71,-72,-73,-84,-85,-86,-87,-88,-89,-90,-91,-92,162,163,164,165,167,168,169,-22,-65,-32,-74,-32,-57,-76,-60,-77,-63,-78,-68,-69,-32,218,-29,234,235,236,237,238,239,240,241,242,-23,-66,-26,-46,-47,-48,-49,-51,-52,-53,-54,-55,-56,-93,-94,-95,-96,-97,-98,-99,-100,-101,260,-58,-59,-61,-62,-64,-67,273,]),'Token_Corchete_Cerrado':([60,79,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,113,127,130,143,144,145,146,147,148,149,150,173,174,209,210,217,218,219,220,221,222,223,224,225,226,227,228,234,235,236,237,238,239,240,241,242,243,251,252,253,254,255,262,266,267,],[77,-32,-45,-50,-32,-32,-32,-32,-32,-70,-71,-72,-73,-84,-85,-86,-87,-88,-89,-90,-91,-92,161,-65,-74,-57,-76,-60,-77,-63,-78,-68,-69,216,217,247,248,-66,-26,-46,-47,-48,-49,-51,-52,-53,-54,-55,-56,-93,-94,-95,-96,-97,-98,-99,-100,-101,256,-58,-59,-61,-62,-64,267,270,-67,]),'Token_Float':([64,65,66,67,68,69,71,72,73,128,129,132,133,134,135,136,137,138,139,140,141,142,151,152,153,154,155,156,157,158,159,166,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,203,204,229,230,231,232,233,250,261,263,],[89,89,89,89,89,89,89,89,89,89,89,89,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,89,89,89,89,89,89,89,89,89,89,89,-75,89,89,89,89,89,89,89,89,89,-32,-32,-32,-32,-32,89,89,89,89,89,89,89,89,89,89,]),'PR_true':([64,65,66,67,68,69,71,72,73,128,129,132,133,134,135,136,137,138,139,140,141,142,151,152,153,154,155,156,157,158,159,166,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,203,204,229,230,231,232,233,250,261,263,],[90,90,90,90,90,90,90,90,90,90,90,90,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,90,90,90,90,90,90,90,90,90,90,90,-75,90,90,90,90,90,90,90,90,90,-32,-32,-32,-32,-32,90,90,90,90,90,90,90,90,90,90,]),'PR_false':([64,65,66,67,68,69,71,72,73,128,129,132,133,134,135,136,137,138,139,140,141,142,151,152,153,154,155,156,157,158,159,166,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,203,204,229,230,231,232,233,250,261,263,],[91,91,91,91,91,91,91,91,91,91,91,91,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,91,91,91,91,91,91,91,91,91,91,91,-75,91,91,91,91,91,91,91,91,91,-32,-32,-32,-32,-32,91,91,91,91,91,91,91,91,91,91,]),'PR_sin':([64,65,66,67,68,69,71,72,73,128,129,132,133,134,135,136,137,138,139,140,141,142,151,152,153,154,155,156,157,158,159,166,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,203,204,229,230,231,232,233,250,261,263,],[103,103,103,103,103,103,103,103,103,103,103,103,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,103,103,103,103,103,103,103,103,103,103,103,-75,103,103,103,103,103,103,103,103,103,-32,-32,-32,-32,-32,103,103,103,103,103,103,103,103,103,103,]),'PR_cos':([64,65,66,67,68,69,71,72,73,128,129,132,133,134,135,136,137,138,139,140,141,142,151,152,153,154,155,156,157,158,159,166,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,203,204,229,230,231,232,233,250,261,263,],[104,104,104,104,104,104,104,104,104,104,104,104,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,104,104,104,104,104,104,104,104,104,104,104,-75,104,104,104,104,104,104,104,104,104,-32,-32,-32,-32,-32,104,104,104,104,104,104,104,104,104,104,]),'PR_tan':([64,65,66,67,68,69,71,72,73,128,129,132,133,134,135,136,137,138,139,140,141,142,151,152,153,154,155,156,157,158,159,166,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,203,204,229,230,231,232,233,250,261,263,],[105,105,105,105,105,105,105,105,105,105,105,105,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,105,105,105,105,105,105,105,105,105,105,105,-75,105,105,105,105,105,105,105,105,105,-32,-32,-32,-32,-32,105,105,105,105,105,105,105,105,105,105,]),'PR_cotengent':([64,65,66,67,68,69,71,72,73,128,129,132,133,134,135,136,137,138,139,140,141,142,151,152,153,154,155,156,157,158,159,166,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,203,204,229,230,231,232,233,250,261,263,],[106,106,106,106,106,106,106,106,106,106,106,106,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,106,106,106,106,106,106,106,106,106,106,106,-75,106,106,106,106,106,106,106,106,106,-32,-32,-32,-32,-32,106,106,106,106,106,106,106,106,106,106,]),'PR_cossecat':([64,65,66,67,68,69,71,72,73,128,129,132,133,134,135,136,137,138,139,140,141,142,151,152,153,154,155,156,157,158,159,166,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,203,204,229,230,231,232,233,250,261,263,],[107,107,107,107,107,107,107,107,107,107,107,107,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,107,107,107,107,107,107,107,107,107,107,107,-75,107,107,107,107,107,107,107,107,107,-32,-32,-32,-32,-32,107,107,107,107,107,107,107,107,107,107,]),'PR_secant':([64,65,66,67,68,69,71,72,73,128,129,132,133,134,135,136,137,138,139,140,141,142,151,152,153,154,155,156,157,158,159,166,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,203,204,229,230,231,232,233,250,261,263,],[108,108,108,108,108,108,108,108,108,108,108,108,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,108,108,108,108,108,108,108,108,108,108,108,-75,108,108,108,108,108,108,108,108,108,-32,-32,-32,-32,-32,108,108,108,108,108,108,108,108,108,108,]),'PR_seninv':([64,65,66,67,68,69,71,72,73,128,129,132,133,134,135,136,137,138,139,140,141,142,151,152,153,154,155,156,157,158,159,166,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,203,204,229,230,231,232,233,250,261,263,],[109,109,109,109,109,109,109,109,109,109,109,109,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,109,109,109,109,109,109,109,109,109,109,109,-75,109,109,109,109,109,109,109,109,109,-32,-32,-32,-32,-32,109,109,109,109,109,109,109,109,109,109,]),'PR_cosinv':([64,65,66,67,68,69,71,72,73,128,129,132,133,134,135,136,137,138,139,140,141,142,151,152,153,154,155,156,157,158,159,166,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,203,204,229,230,231,232,233,250,261,263,],[110,110,110,110,110,110,110,110,110,110,110,110,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,110,110,110,110,110,110,110,110,110,110,110,-75,110,110,110,110,110,110,110,110,110,-32,-32,-32,-32,-32,110,110,110,110,110,110,110,110,110,110,]),'PR_taninv':([64,65,66,67,68,69,71,72,73,128,129,132,133,134,135,136,137,138,139,140,141,142,151,152,153,154,155,156,157,158,159,166,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,203,204,229,230,231,232,233,250,261,263,],[111,111,111,111,111,111,111,111,111,111,111,111,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,111,111,111,111,111,111,111,111,111,111,111,-75,111,111,111,111,111,111,111,111,111,-32,-32,-32,-32,-32,111,111,111,111,111,111,111,111,111,111,]),'TOKEN_POW':([79,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,127,130,147,148,149,150,217,218,234,235,236,237,238,239,240,241,242,267,],[-32,-32,-32,-32,-70,-71,-72,-73,-84,-85,-86,-87,-88,-89,-90,-91,-92,-65,-74,193,-78,-68,-69,-66,-26,-93,-94,-95,-96,-97,-98,-99,-100,-101,-67,]),'TOKEN_MULTI':([79,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,127,130,145,146,147,148,149,150,217,218,234,235,236,237,238,239,240,241,242,255,267,],[-32,-32,-32,-32,-32,-70,-71,-72,-73,-84,-85,-86,-87,-88,-89,-90,-91,-92,-65,-74,191,-77,-63,-78,-68,-69,-66,-26,-93,-94,-95,-96,-97,-98,-99,-100,-101,-64,-67,]),'TOKEN_DIVID':([79,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,127,130,145,146,147,148,149,150,217,218,234,235,236,237,238,239,240,241,242,255,267,],[-32,-32,-32,-32,-32,-70,-71,-72,-73,-84,-85,-86,-87,-88,-89,-90,-91,-92,-65,-74,192,-77,-63,-78,-68,-69,-66,-26,-93,-94,-95,-96,-97,-98,-99,-100,-101,-64,-67,]),'Token_SUMA':([79,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,127,130,143,144,145,146,147,148,149,150,217,218,234,235,236,237,238,239,240,241,242,253,254,255,267,],[-32,-32,-32,-32,-32,-32,-70,-71,-72,-73,-84,-85,-86,-87,-88,-89,-90,-91,-92,-65,-74,189,-76,-60,-77,-63,-78,-68,-69,-66,-26,-93,-94,-95,-96,-97,-98,-99,-100,-101,-61,-62,-64,-67,]),'Token_Resta':([79,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,127,130,143,144,145,146,147,148,149,150,217,218,234,235,236,237,238,239,240,241,242,253,254,255,267,],[-32,-32,-32,-32,-32,-32,-70,-71,-72,-73,-84,-85,-86,-87,-88,-89,-90,-91,-92,-65,-74,190,-76,-60,-77,-63,-78,-68,-69,-66,-26,-93,-94,-95,-96,-97,-98,-99,-100,-101,-61,-62,-64,-67,]),'TOKEN_MAYOR':([79,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,127,130,143,144,145,146,147,148,149,150,210,217,218,234,235,236,237,238,239,240,241,242,251,252,253,254,255,267,],[-32,137,-32,-32,-32,-32,-32,-70,-71,-72,-73,-84,-85,-86,-87,-88,-89,-90,-91,-92,-65,-74,-57,-76,-60,-77,-63,-78,-68,-69,137,-66,-26,-93,-94,-95,-96,-97,-98,-99,-100,-101,-58,-59,-61,-62,-64,-67,]),'TOKEN_MENOR':([79,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,127,130,143,144,145,146,147,148,149,150,210,217,218,234,235,236,237,238,239,240,241,242,251,252,253,254,255,267,],[-32,138,-32,-32,-32,-32,-32,-70,-71,-72,-73,-84,-85,-86,-87,-88,-89,-90,-91,-92,-65,-74,-57,-76,-60,-77,-63,-78,-68,-69,138,-66,-26,-93,-94,-95,-96,-97,-98,-99,-100,-101,-58,-59,-61,-62,-64,-67,]),'TOKEN_MAYOR_IG':([79,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,127,130,143,144,145,146,147,148,149,150,210,217,218,234,235,236,237,238,239,240,241,242,251,252,253,254,255,267,],[-32,139,-32,-32,-32,-32,-32,-70,-71,-72,-73,-84,-85,-86,-87,-88,-89,-90,-91,-92,-65,-74,-57,-76,-60,-77,-63,-78,-68,-69,139,-66,-26,-93,-94,-95,-96,-97,-98,-99,-100,-101,-58,-59,-61,-62,-64,-67,]),'TOKEN_MENOR_IG':([79,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,127,130,143,144,145,146,147,148,149,150,210,217,218,234,235,236,237,238,239,240,241,242,251,252,253,254,255,267,],[-32,140,-32,-32,-32,-32,-32,-70,-71,-72,-73,-84,-85,-86,-87,-88,-89,-90,-91,-92,-65,-74,-57,-76,-60,-77,-63,-78,-68,-69,140,-66,-26,-93,-94,-95,-96,-97,-98,-99,-100,-101,-58,-59,-61,-62,-64,-67,]),'TOKEN_COMPARA':([79,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,127,130,143,144,145,146,147,148,149,150,210,217,218,234,235,236,237,238,239,240,241,242,251,252,253,254,255,267,],[-32,141,-32,-32,-32,-32,-32,-70,-71,-72,-73,-84,-85,-86,-87,-88,-89,-90,-91,-92,-65,-74,-57,-76,-60,-77,-63,-78,-68,-69,141,-66,-26,-93,-94,-95,-96,-97,-98,-99,-100,-101,-58,-59,-61,-62,-64,-67,]),'TOKEN_NO_IGUAL':([79,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,127,130,143,144,145,146,147,148,149,150,210,217,218,234,235,236,237,238,239,240,241,242,251,252,253,254,255,267,],[-32,142,-32,-32,-32,-32,-32,-70,-71,-72,-73,-84,-85,-86,-87,-88,-89,-90,-91,-92,-65,-74,-57,-76,-60,-77,-63,-78,-68,-69,142,-66,-26,-93,-94,-95,-96,-97,-98,-99,-100,-101,-58,-59,-61,-62,-64,-67,]),'PR_and':([79,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,127,130,143,144,145,146,147,148,149,150,210,217,218,223,224,225,226,227,228,234,235,236,237,238,239,240,241,242,251,252,253,254,255,267,],[-32,133,-50,-32,-32,-32,-32,-32,-70,-71,-72,-73,-84,-85,-86,-87,-88,-89,-90,-91,-92,-65,-74,-57,-76,-60,-77,-63,-78,-68,-69,-50,-66,-26,-51,-52,-53,-54,-55,-56,-93,-94,-95,-96,-97,-98,-99,-100,-101,-58,-59,-61,-62,-64,-67,]),'PR_or':([79,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,127,130,143,144,145,146,147,148,149,150,210,217,218,223,224,225,226,227,228,234,235,236,237,238,239,240,241,242,251,252,253,254,255,267,],[-32,134,-50,-32,-32,-32,-32,-32,-70,-71,-72,-73,-84,-85,-86,-87,-88,-89,-90,-91,-92,-65,-74,-57,-76,-60,-77,-63,-78,-68,-69,-50,-66,-26,-51,-52,-53,-54,-55,-56,-93,-94,-95,-96,-97,-98,-99,-100,-101,-58,-59,-61,-62,-64,-67,]),'Token_And':([79,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,127,130,143,144,145,146,147,148,149,150,210,217,218,223,224,225,226,227,228,234,235,236,237,238,239,240,241,242,251,252,253,254,255,267,],[-32,135,-50,-32,-32,-32,-32,-32,-70,-71,-72,-73,-84,-85,-86,-87,-88,-89,-90,-91,-92,-65,-74,-57,-76,-60,-77,-63,-78,-68,-69,-50,-66,-26,-51,-52,-53,-54,-55,-56,-93,-94,-95,-96,-97,-98,-99,-100,-101,-58,-59,-61,-62,-64,-67,]),'Token_Or':([79,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,127,130,143,144,145,146,147,148,149,150,210,217,218,223,224,225,226,227,228,234,235,236,237,238,239,240,241,242,251,252,253,254,255,267,],[-32,136,-50,-32,-32,-32,-32,-32,-70,-71,-72,-73,-84,-85,-86,-87,-88,-89,-90,-91,-92,-65,-74,-57,-76,-60,-77,-63,-78,-68,-69,-50,-66,-26,-51,-52,-53,-54,-55,-56,-93,-94,-95,-96,-97,-98,-99,-100,-101,-58,-59,-61,-62,-64,-67,]),'PR_else':([258,],[264,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'globalVar':([3,28,],[4,58,]),'empty':([3,4,8,23,24,26,28,36,57,64,77,79,85,86,87,88,89,129,132,133,134,135,136,137,138,139,140,141,142,170,172,189,190,191,192,193,205,206,269,],[6,9,9,31,34,37,6,37,76,82,125,130,144,146,148,130,130,82,82,179,179,179,179,179,179,179,179,179,179,76,37,179,179,179,179,179,37,37,37,]),'BlockFun':([4,8,],[7,20,]),'fun':([4,8,],[8,8,]),'tipo':([5,10,48,57,170,],[11,21,63,74,74,]),'MainBlock':([7,],[18,]),'decVar':([11,30,63,],[22,59,78,]),'varNom':([11,30,63,],[23,23,23,]),'decVar2':([23,],[29,]),'arr1':([24,],[32,]),'bloque':([26,36,172,205,206,269,],[35,62,215,245,246,272,]),'statements':([26,36,172,205,206,269,],[36,36,36,36,36,36,]),'var':([26,36,172,205,206,269,],[38,38,38,38,38,38,]),'funCallVoid':([26,36,172,205,206,269,],[39,39,39,39,39,39,]),'Conditions':([26,36,172,205,206,269,],[40,40,40,40,40,40,]),'ciclos':([26,36,172,205,206,269,],[41,41,41,41,41,41,]),'asigna':([26,36,172,205,206,269,],[42,42,42,42,42,42,]),'read':([26,36,172,205,206,269,],[43,43,43,43,43,43,]),'write':([26,36,172,205,206,269,],[44,44,44,44,44,44,]),'GRAPH':([26,36,172,205,206,269,],[45,45,45,45,45,45,]),'map':([26,36,172,205,206,269,],[46,46,46,46,46,46,]),'NORMALIZAR':([26,36,172,205,206,269,],[47,47,47,47,47,47,]),'params':([57,170,],[75,214,]),'paramsCall':([64,129,132,],[80,175,177,]),'SuperExp':([64,65,67,68,69,71,72,73,129,132,151,152,153,154,155,156,157,158,159,166,178,180,181,182,204,263,],[81,112,114,115,116,118,119,120,81,81,194,195,196,197,198,199,200,201,202,209,219,220,221,222,244,268,]),'Exp':([64,65,67,68,69,71,72,73,129,132,151,152,153,154,155,156,157,158,159,166,178,180,181,182,204,263,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'miniExp':([64,65,66,67,68,69,71,72,73,128,129,132,151,152,153,154,155,156,157,158,159,166,178,180,181,182,183,184,185,186,187,188,203,204,229,230,250,261,263,],[84,84,113,84,84,84,84,84,84,174,84,84,84,84,84,84,84,84,84,84,84,210,84,84,84,84,223,224,225,226,227,228,243,84,251,252,262,266,84,]),'microExp':([64,65,66,67,68,69,71,72,73,128,129,132,151,152,153,154,155,156,157,158,159,166,178,180,181,182,183,184,185,186,187,188,203,204,229,230,231,232,250,261,263,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,253,254,85,85,85,]),'minimicroExp':([64,65,66,67,68,69,71,72,73,128,129,132,151,152,153,154,155,156,157,158,159,166,178,180,181,182,183,184,185,186,187,188,203,204,229,230,231,232,233,250,261,263,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,255,86,86,86,]),'conjunto':([64,65,66,67,68,69,71,72,73,128,129,132,151,152,153,154,155,156,157,158,159,166,178,180,181,182,183,184,185,186,187,188,203,204,229,230,231,232,233,250,261,263,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'funCall':([64,65,66,67,68,69,71,72,73,128,129,132,151,152,153,154,155,156,157,158,159,166,178,180,181,182,183,184,185,186,187,188,203,204,229,230,231,232,233,250,261,263,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'llamada':([64,65,66,67,68,69,71,72,73,128,129,132,151,152,153,154,155,156,157,158,159,166,178,180,181,182,183,184,185,186,187,188,203,204,229,230,231,232,233,250,261,263,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'sin':([64,65,66,67,68,69,71,72,73,128,129,132,151,152,153,154,155,156,157,158,159,166,178,180,181,182,183,184,185,186,187,188,203,204,229,230,231,232,233,250,261,263,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'cos':([64,65,66,67,68,69,71,72,73,128,129,132,151,152,153,154,155,156,157,158,159,166,178,180,181,182,183,184,185,186,187,188,203,204,229,230,231,232,233,250,261,263,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'tan':([64,65,66,67,68,69,71,72,73,128,129,132,151,152,153,154,155,156,157,158,159,166,178,180,181,182,183,184,185,186,187,188,203,204,229,230,231,232,233,250,261,263,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'COTANGENT':([64,65,66,67,68,69,71,72,73,128,129,132,151,152,153,154,155,156,157,158,159,166,178,180,181,182,183,184,185,186,187,188,203,204,229,230,231,232,233,250,261,263,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'COSECANT':([64,65,66,67,68,69,71,72,73,128,129,132,151,152,153,154,155,156,157,158,159,166,178,180,181,182,183,184,185,186,187,188,203,204,229,230,231,232,233,250,261,263,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'SECANT':([64,65,66,67,68,69,71,72,73,128,129,132,151,152,153,154,155,156,157,158,159,166,178,180,181,182,183,184,185,186,187,188,203,204,229,230,231,232,233,250,261,263,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'sininv':([64,65,66,67,68,69,71,72,73,128,129,132,151,152,153,154,155,156,157,158,159,166,178,180,181,182,183,184,185,186,187,188,203,204,229,230,231,232,233,250,261,263,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'cosinv':([64,65,66,67,68,69,71,72,73,128,129,132,151,152,153,154,155,156,157,158,159,166,178,180,181,182,183,184,185,186,187,188,203,204,229,230,231,232,233,250,261,263,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'taninv':([64,65,66,67,68,69,71,72,73,128,129,132,151,152,153,154,155,156,157,158,159,166,178,180,181,182,183,184,185,186,187,188,203,204,229,230,231,232,233,250,261,263,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'arr2':([77,],[124,]),'CuadruploMiniExp':([79,88,89,],[127,149,150,]),'CuadruplosCrea':([85,],[143,]),'CuadruplosCreaMult':([86,],[145,]),'CuadruplosCreaPow':([87,],[147,]),'funBlock':([122,],[171,]),'CuadruploOpp':([133,134,135,136,137,138,139,140,141,142,189,190,191,192,193,],[178,180,181,182,183,184,185,186,187,188,229,230,231,232,233,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> PR_Program Token_Llave_Abierta globalVar BlockFun MainBlock Token_Llave_Cerrado','prog',6,'p_progama','Entrega1.py',120),
  ('tipo -> PR_int','tipo',1,'p_tipo','Entrega1.py',124),
  ('tipo -> PR_float','tipo',1,'p_tipo','Entrega1.py',125),
  ('tipo -> PR_bool','tipo',1,'p_tipo','Entrega1.py',126),
  ('tipo -> PR_void','tipo',1,'p_tipo','Entrega1.py',127),
  ('tipo -> PR_rad','tipo',1,'p_tipo','Entrega1.py',128),
  ('tipo -> PR_degree','tipo',1,'p_tipo','Entrega1.py',129),
  ('globalVar -> PR_globalVar tipo decVar Token_Punto_Coma globalVar','globalVar',5,'p_globalVar','Entrega1.py',135),
  ('globalVar -> empty','globalVar',1,'p_globalVar','Entrega1.py',136),
  ('var -> PR_var tipo decVar Token_Punto_Coma','var',4,'p_var','Entrega1.py',141),
  ('decVar -> varNom decVar2','decVar',2,'p_decVar','Entrega1.py',144),
  ('decVar2 -> Token_Coma decVar','decVar2',2,'p_decVar2','Entrega1.py',148),
  ('decVar2 -> empty','decVar2',1,'p_decVar2','Entrega1.py',149),
  ('varNom -> ID arr1','varNom',2,'p_varNom','Entrega1.py',154),
  ('arr1 -> Token_Corchete_Abierto Token_Entero Token_Corchete_Cerrado arr2','arr1',4,'p_varNom','Entrega1.py',155),
  ('arr1 -> empty','arr1',1,'p_varNom','Entrega1.py',156),
  ('arr2 -> Token_Corchete_Abierto Token_Entero Token_Corchete_Cerrado','arr2',3,'p_varNom','Entrega1.py',157),
  ('arr2 -> empty','arr2',1,'p_varNom','Entrega1.py',158),
  ('BlockFun -> fun BlockFun','BlockFun',2,'p_BlockFun','Entrega1.py',165),
  ('BlockFun -> empty','BlockFun',1,'p_BlockFun','Entrega1.py',166),
  ('fun -> PR_fun tipo ID Token_Parent_Abierto params Token_Parent_Cerrado funBlock','fun',7,'p_fun','Entrega1.py',170),
  ('params -> tipo ID','params',2,'p_params','Entrega1.py',173),
  ('params -> tipo ID Token_Coma params','params',4,'p_params','Entrega1.py',174),
  ('params -> empty','params',1,'p_params','Entrega1.py',175),
  ('funBlock -> Token_Llave_Abierta bloque Token_Llave_Cerrado','funBlock',3,'p_funBlock','Entrega1.py',179),
  ('funCall -> ID Token_Parent_Abierto paramsCall Token_Parent_Cerrado','funCall',4,'p_funCall','Entrega1.py',183),
  ('funCallVoid -> ID Token_Parent_Abierto paramsCall Token_Parent_Cerrado Token_Punto_Coma','funCallVoid',5,'p_funCallVoid','Entrega1.py',186),
  ('paramsCall -> SuperExp','paramsCall',1,'p_paramsCall','Entrega1.py',189),
  ('paramsCall -> SuperExp Token_Coma paramsCall','paramsCall',3,'p_paramsCall','Entrega1.py',190),
  ('paramsCall -> empty','paramsCall',1,'p_paramsCall','Entrega1.py',191),
  ('MainBlock -> PR_main Token_Llave_Abierta bloque Token_Llave_Cerrado','MainBlock',4,'p_mainBlock','Entrega1.py',197),
  ('empty -> <empty>','empty',0,'p_empty','Entrega1.py',202),
  ('bloque -> statements bloque','bloque',2,'p_block','Entrega1.py',212),
  ('bloque -> empty','bloque',1,'p_block','Entrega1.py',213),
  ('statements -> var','statements',1,'p_statments','Entrega1.py',216),
  ('statements -> funCallVoid','statements',1,'p_statments','Entrega1.py',217),
  ('statements -> Conditions','statements',1,'p_statments','Entrega1.py',218),
  ('statements -> ciclos','statements',1,'p_statments','Entrega1.py',219),
  ('statements -> asigna','statements',1,'p_statments','Entrega1.py',220),
  ('statements -> read','statements',1,'p_statments','Entrega1.py',221),
  ('statements -> write','statements',1,'p_statments','Entrega1.py',222),
  ('statements -> GRAPH','statements',1,'p_statments','Entrega1.py',223),
  ('statements -> map','statements',1,'p_statments','Entrega1.py',224),
  ('statements -> NORMALIZAR','statements',1,'p_statments','Entrega1.py',225),
  ('SuperExp -> Exp','SuperExp',1,'p_SuperExp','Entrega1.py',231),
  ('SuperExp -> Exp PR_and CuadruploOpp SuperExp','SuperExp',4,'p_SuperExp','Entrega1.py',232),
  ('SuperExp -> Exp PR_or CuadruploOpp SuperExp','SuperExp',4,'p_SuperExp','Entrega1.py',233),
  ('SuperExp -> Exp Token_And CuadruploOpp SuperExp','SuperExp',4,'p_SuperExp','Entrega1.py',234),
  ('SuperExp -> Exp Token_Or CuadruploOpp SuperExp','SuperExp',4,'p_SuperExp','Entrega1.py',235),
  ('Exp -> miniExp','Exp',1,'p_Exp','Entrega1.py',237),
  ('Exp -> miniExp TOKEN_MAYOR CuadruploOpp miniExp','Exp',4,'p_Exp','Entrega1.py',238),
  ('Exp -> miniExp TOKEN_MENOR CuadruploOpp miniExp','Exp',4,'p_Exp','Entrega1.py',239),
  ('Exp -> miniExp TOKEN_MAYOR_IG CuadruploOpp miniExp','Exp',4,'p_Exp','Entrega1.py',240),
  ('Exp -> miniExp TOKEN_MENOR_IG CuadruploOpp miniExp','Exp',4,'p_Exp','Entrega1.py',241),
  ('Exp -> miniExp TOKEN_COMPARA CuadruploOpp miniExp','Exp',4,'p_Exp','Entrega1.py',242),
  ('Exp -> miniExp TOKEN_NO_IGUAL CuadruploOpp miniExp','Exp',4,'p_Exp','Entrega1.py',243),
  ('miniExp -> microExp CuadruplosCrea','miniExp',2,'p_miniExp','Entrega1.py',246),
  ('miniExp -> microExp CuadruplosCrea Token_SUMA CuadruploOpp miniExp','miniExp',5,'p_miniExp','Entrega1.py',247),
  ('miniExp -> microExp CuadruplosCrea Token_Resta CuadruploOpp miniExp','miniExp',5,'p_miniExp','Entrega1.py',248),
  ('microExp -> minimicroExp CuadruplosCreaMult','microExp',2,'p_microExp','Entrega1.py',253),
  ('microExp -> minimicroExp CuadruplosCreaMult TOKEN_MULTI CuadruploOpp microExp','microExp',5,'p_microExp','Entrega1.py',254),
  ('microExp -> minimicroExp CuadruplosCreaMult TOKEN_DIVID CuadruploOpp microExp','microExp',5,'p_microExp','Entrega1.py',255),
  ('minimicroExp -> conjunto CuadruplosCreaPow','minimicroExp',2,'p_minimicroExp','Entrega1.py',258),
  ('minimicroExp -> conjunto CuadruplosCreaPow TOKEN_POW CuadruploOpp minimicroExp','minimicroExp',5,'p_minimicroExp','Entrega1.py',259),
  ('conjunto -> ID CuadruploMiniExp','conjunto',2,'p_conjunto','Entrega1.py',262),
  ('conjunto -> ID Token_Corchete_Abierto miniExp Token_Corchete_Cerrado','conjunto',4,'p_conjunto','Entrega1.py',263),
  ('conjunto -> ID Token_Corchete_Abierto miniExp Token_Corchete_Cerrado Token_Corchete_Abierto miniExp Token_Corchete_Cerrado','conjunto',7,'p_conjunto','Entrega1.py',264),
  ('conjunto -> Token_Entero CuadruploMiniExp','conjunto',2,'p_conjunto','Entrega1.py',265),
  ('conjunto -> Token_Float CuadruploMiniExp','conjunto',2,'p_conjunto','Entrega1.py',266),
  ('conjunto -> PR_true','conjunto',1,'p_conjunto','Entrega1.py',267),
  ('conjunto -> PR_false','conjunto',1,'p_conjunto','Entrega1.py',268),
  ('conjunto -> funCall','conjunto',1,'p_conjunto','Entrega1.py',269),
  ('conjunto -> llamada','conjunto',1,'p_conjunto','Entrega1.py',270),
  ('CuadruploMiniExp -> empty','CuadruploMiniExp',1,'p_CuadruploMiniExp','Entrega1.py',273),
  ('CuadruploOpp -> empty','CuadruploOpp',1,'p_CuadruploOpp','Entrega1.py',277),
  ('CuadruplosCrea -> empty','CuadruplosCrea',1,'p_CuadruploCrea','Entrega1.py',281),
  ('CuadruplosCreaMult -> empty','CuadruplosCreaMult',1,'p_CuadruploCreaMult','Entrega1.py',287),
  ('CuadruplosCreaPow -> empty','CuadruplosCreaPow',1,'p_CuadruploCreaPow','Entrega1.py',293),
  ('Conditions -> PR_if Token_Parent_Abierto SuperExp Token_Parent_Cerrado Token_Llave_Abierta bloque Token_Llave_Cerrado PR_else Token_Llave_Abierta bloque Token_Llave_Cerrado','Conditions',11,'p_condition','Entrega1.py',306),
  ('ciclos -> PR_while Token_Parent_Abierto SuperExp Token_Parent_Cerrado Token_Llave_Abierta bloque Token_Llave_Cerrado','ciclos',7,'p_ciclos','Entrega1.py',311),
  ('asigna -> ID TOKEN_ASIGNA SuperExp Token_Punto_Coma','asigna',4,'p_asignaciones','Entrega1.py',317),
  ('asigna -> ID Token_Corchete_Abierto miniExp Token_Corchete_Cerrado TOKEN_ASIGNA SuperExp Token_Punto_Coma','asigna',7,'p_asignaciones','Entrega1.py',318),
  ('asigna -> ID Token_Corchete_Abierto miniExp Token_Corchete_Cerrado Token_Corchete_Abierto miniExp Token_Corchete_Cerrado TOKEN_ASIGNA SuperExp Token_Punto_Coma','asigna',10,'p_asignaciones','Entrega1.py',319),
  ('llamada -> sin','llamada',1,'p_llamada','Entrega1.py',324),
  ('llamada -> cos','llamada',1,'p_llamada','Entrega1.py',325),
  ('llamada -> tan','llamada',1,'p_llamada','Entrega1.py',326),
  ('llamada -> COTANGENT','llamada',1,'p_llamada','Entrega1.py',327),
  ('llamada -> COSECANT','llamada',1,'p_llamada','Entrega1.py',328),
  ('llamada -> SECANT','llamada',1,'p_llamada','Entrega1.py',329),
  ('llamada -> sininv','llamada',1,'p_llamada','Entrega1.py',330),
  ('llamada -> cosinv','llamada',1,'p_llamada','Entrega1.py',331),
  ('llamada -> taninv','llamada',1,'p_llamada','Entrega1.py',332),
  ('sin -> PR_sin Token_Parent_Abierto SuperExp Token_Parent_Cerrado','sin',4,'p_sin','Entrega1.py',335),
  ('cos -> PR_cos Token_Parent_Abierto SuperExp Token_Parent_Cerrado','cos',4,'p_cos','Entrega1.py',338),
  ('tan -> PR_tan Token_Parent_Abierto SuperExp Token_Parent_Cerrado','tan',4,'p_tan','Entrega1.py',341),
  ('COTANGENT -> PR_cotengent Token_Parent_Abierto SuperExp Token_Parent_Cerrado','COTANGENT',4,'p_cotan','Entrega1.py',344),
  ('COSECANT -> PR_cossecat Token_Parent_Abierto SuperExp Token_Parent_Cerrado','COSECANT',4,'p_cosecant','Entrega1.py',347),
  ('SECANT -> PR_secant Token_Parent_Abierto SuperExp Token_Parent_Cerrado','SECANT',4,'p_secant','Entrega1.py',351),
  ('sininv -> PR_seninv Token_Parent_Abierto SuperExp Token_Parent_Cerrado','sininv',4,'p_sininv','Entrega1.py',354),
  ('cosinv -> PR_cosinv Token_Parent_Abierto SuperExp Token_Parent_Cerrado','cosinv',4,'p_cosinv','Entrega1.py',357),
  ('taninv -> PR_taninv Token_Parent_Abierto SuperExp Token_Parent_Cerrado','taninv',4,'p_taninv','Entrega1.py',360),
  ('write -> PR_Write Token_Parent_Abierto ID Token_Parent_Cerrado Token_Punto_Coma','write',5,'p_write','Entrega1.py',363),
  ('write -> PR_Write Token_Parent_Abierto ID Token_Corchete_Abierto SuperExp Token_Corchete_Cerrado Token_Parent_Cerrado Token_Punto_Coma','write',8,'p_write','Entrega1.py',364),
  ('write -> PR_Write Token_Parent_Abierto ID Token_Corchete_Abierto miniExp Token_Corchete_Cerrado Token_Corchete_Abierto miniExp Token_Corchete_Cerrado Token_Parent_Cerrado Token_Punto_Coma','write',11,'p_write','Entrega1.py',365),
  ('read -> PR_read Token_Parent_Abierto SuperExp Token_Parent_Cerrado Token_Punto_Coma','read',5,'p_read','Entrega1.py',368),
  ('GRAPH -> PR_graph Token_Parent_Abierto SuperExp Token_Parent_Cerrado Token_Punto_Coma','GRAPH',5,'p_graf','Entrega1.py',371),
  ('NORMALIZAR -> PR_normalizar Token_Parent_Abierto SuperExp Token_Parent_Cerrado Token_Punto_Coma','NORMALIZAR',5,'p_NORM','Entrega1.py',374),
  ('map -> PR_mapmat Token_Parent_Abierto SuperExp Token_Parent_Cerrado Token_Punto_Coma','map',5,'p_map','Entrega1.py',377),
]
