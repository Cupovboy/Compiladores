
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'progID PR_Program PR_Write PR_and PR_bool PR_cos PR_cosinv PR_cossecat PR_cotengent PR_degree PR_display PR_else PR_false PR_float PR_fun PR_globalVar PR_graph PR_if PR_int PR_main PR_mapmat PR_normalizar PR_or PR_rad PR_read PR_secant PR_seninv PR_sin PR_tan PR_taninv PR_true PR_var PR_void PR_while TOKEN_ASIGNA TOKEN_COMPARA TOKEN_DIVID TOKEN_MAYOR TOKEN_MAYOR_IG TOKEN_MENOR TOKEN_MENOR_IG TOKEN_MULTI TOKEN_NO_IGUAL TOKEN_POW Token_And Token_Coma Token_Corchete_Abierto Token_Corchete_Cerrado Token_Entero Token_Float Token_Llave_Abierta Token_Llave_Cerrado Token_Or Token_Parent_Abierto Token_Parent_Cerrado Token_Punto_Coma Token_Resta Token_SUMA Token_Single_Digprog : PR_Program Token_Llave_Abierta globalVar BlockFun  MainBlock Token_Llave_Cerradotipo : PR_int\n\t\t\t| PR_float\n\t\t\t| PR_bool \n\t\t\t| PR_void\n\t\t\t| PR_rad\n\t\t\t| PR_degree \n\t\t\tglobalVar : PR_globalVar tipo decVar Token_Punto_Coma globalVar\n\t\t\t\t   | empty\n      var : PR_var tipo decVar Token_Punto_ComadecVar : varNom decVar2\n    \t\tdecVar2 : Token_Coma decVar\n\t\t\t   | empty\n\tvarNom : ID arr1\n\t \tarr1 : Token_Corchete_Abierto Token_Entero Token_Corchete_Cerrado arr2\n\t \t     | empty\n\t \tarr2 : Token_Corchete_Abierto Token_Entero Token_Corchete_Cerrado\n\t \t     | empty\n\t\t        BlockFun : fun BlockFun\n\t              | empty\n\t              fun : PR_fun tipo ID Token_Parent_Abierto params Token_Parent_Cerrado funBlockparams : tipo ID\n\t        | tipo ID Token_Coma params\n\t\t\t| emptyfunBlock : Token_Llave_Abierta bloque Token_Llave_CerradofunCall : ID Token_Parent_Abierto paramsCall Token_Parent_Cerrado funCallVoid : ID Token_Parent_Abierto paramsCall Token_Parent_Cerrado Token_Punto_ComaparamsCall : SuperExp\n\t        | SuperExp Token_Coma paramsCall\n\t\t\t| emptyMainBlock : PR_main Token_Llave_Abierta bloque Token_Llave_Cerradoempty :bloque : statements bloque\n\t       |  empty statements : var \n\t              | funCallVoid\n\t              | Conditions\n\t              | ciclos\n\t              | asigna\n\t              | read \n\t              | write\n\t              | GRAPH\n\t              | map\n\t              | NORMALIZARSuperExp : Exp \n\t            | Exp  PR_and CuadruploOpp SuperExp CuadruplosCreaANDOR\n\t            | Exp  PR_or CuadruploOpp  SuperExp CuadruplosCreaANDOR\n\t            | Exp  Token_And CuadruploOpp SuperExp CuadruplosCreaANDOR\n\t            | Exp  Token_Or CuadruploOpp SuperExp CuadruplosCreaANDOR  Exp : miniExp \n\t        | miniExp  TOKEN_MAYOR CuadruploOpp miniExp CuadruplosCreaCompara \n\t        | miniExp TOKEN_MENOR CuadruploOpp miniExp CuadruplosCreaCompara\n\t        | miniExp  TOKEN_MAYOR_IG CuadruploOpp miniExp CuadruplosCreaCompara\n\t        | miniExp  TOKEN_MENOR_IG CuadruploOpp miniExp CuadruplosCreaCompara\n\t        | miniExp  TOKEN_COMPARA CuadruploOpp miniExp CuadruplosCreaCompara\n\t        | miniExp  TOKEN_NO_IGUAL CuadruploOpp miniExp CuadruplosCreaComparaminiExp : microExp CuadruplosCrea \n\t           | microExp CuadruplosCrea Token_SUMA CuadruploOpp miniExp\n\t           | microExp CuadruplosCrea Token_Resta CuadruploOpp miniExpmicroExp : minimicroExp CuadruplosCreaMult \n\t           | minimicroExp  CuadruplosCreaMult TOKEN_MULTI CuadruploOpp microExp\n\t           |  minimicroExp CuadruplosCreaMult  TOKEN_DIVID CuadruploOpp microExpminimicroExp : conjunto CuadruplosCreaPow\n\t           | conjunto CuadruplosCreaPow  TOKEN_POW CuadruploOpp minimicroExp conjunto : ID CuadruploMiniExp\n\t           | ID Token_Corchete_Abierto miniExp Token_Corchete_Cerrado\n\t           | ID Token_Corchete_Abierto miniExp Token_Corchete_Cerrado Token_Corchete_Abierto miniExp Token_Corchete_Cerrado\n\t           | Token_Entero  CuadruploMiniExp\n\t           | Token_Float CuadruploMiniExp\n\t           | PR_true CuadruploMiniExp\n\t           | PR_false CuadruploMiniExp\n\t           | funCall \n\t           | llamada\n\t           | Token_Parent_Abierto CuadruploOpp SuperExp Token_Parent_Cerrado CuadruploOppPopCuadruploMiniExp : emptyCuadruploOpp : emptyCuadruploOppPop : emptyCuadruplosCrea : emptyCuadruplosCreaMult : emptyCuadruplosCreaPow : emptyCuadruplosCreaCompara : emptyCuadruplosCreaANDOR : emptyConditions : PR_if Token_Parent_Abierto  CuadruploSaltosINI SuperExp Token_Parent_Cerrado CuadruploCon Token_Llave_Abierta bloque CuadruploConEnd Token_Llave_Cerrado PR_else Token_Llave_Abierta bloque Token_Llave_Cerrado CuadruplosFinalCuadruploCon : emptyCuadruploConEnd : emptyCuadruplosFinal : emptyciclos : PR_while Token_Parent_Abierto  CuadruploSaltosINI SuperExp Token_Parent_Cerrado CuadruploCiclos Token_Llave_Abierta bloque Token_Llave_Cerrado CuadruploCiclosEnd CuadruploSaltosINI : emptyCuadruploCiclos  : emptyCuadruploCiclosEnd : emptyasigna : ID CuadruploMiniExp TOKEN_ASIGNA CuadruploOpp SuperExp CuadruplosAsigna  Token_Punto_Coma\n      | ID Token_Corchete_Abierto miniExp Token_Corchete_Cerrado TOKEN_ASIGNA  CuadruploOpp SuperExp CuadruplosAsigna  Token_Punto_Coma\n      | ID Token_Corchete_Abierto miniExp Token_Corchete_Cerrado Token_Corchete_Abierto miniExp Token_Corchete_Cerrado TOKEN_ASIGNA CuadruploOpp SuperExp CuadruplosAsigna Token_Punto_Coma CuadruplosAsigna : empty llamada : sin\n\t            | cos\n\t            | tan\n\t            | COTANGENT\n\t            | COSECANT\n\t            | SECANT\n\t            | sininv\n\t            | cosinv\n\t            | taninv sin : PR_sin Token_Parent_Abierto SuperExp Token_Parent_Cerradocos : PR_cos Token_Parent_Abierto SuperExp Token_Parent_Cerradotan : PR_tan Token_Parent_Abierto SuperExp Token_Parent_CerradoCOTANGENT : PR_cotengent Token_Parent_Abierto SuperExp Token_Parent_CerradoCOSECANT : PR_cossecat Token_Parent_Abierto SuperExp Token_Parent_CerradoSECANT : PR_secant Token_Parent_Abierto SuperExp Token_Parent_Cerradosininv : PR_seninv Token_Parent_Abierto SuperExp Token_Parent_Cerradocosinv : PR_cosinv Token_Parent_Abierto SuperExp Token_Parent_Cerradotaninv : PR_taninv Token_Parent_Abierto SuperExp Token_Parent_Cerradowrite : PR_Write Token_Parent_Abierto ID Token_Parent_Cerrado Token_Punto_Coma\n\t           | PR_Write Token_Parent_Abierto ID  Token_Corchete_Abierto SuperExp Token_Corchete_Cerrado Token_Parent_Cerrado Token_Punto_Coma\n\t           | PR_Write Token_Parent_Abierto ID Token_Corchete_Abierto miniExp Token_Corchete_Cerrado Token_Corchete_Abierto miniExp Token_Corchete_Cerrado Token_Parent_Cerrado Token_Punto_Comaread : PR_read Token_Parent_Abierto SuperExp Token_Parent_Cerrado Token_Punto_ComaGRAPH : PR_graph Token_Parent_Abierto SuperExp Token_Parent_Cerrado Token_Punto_ComaNORMALIZAR : PR_normalizar Token_Parent_Abierto SuperExp Token_Parent_Cerrado Token_Punto_Comamap : PR_mapmat Token_Parent_Abierto SuperExp Token_Parent_Cerrado Token_Punto_Coma'
    
_lr_action_items = {'PR_Program':([0,],[2,]),'$end':([1,25,],[0,-1,]),'Token_Llave_Abierta':([2,19,125,212,213,255,256,257,258,309,],[3,26,178,-32,-32,285,-84,286,-89,312,]),'PR_globalVar':([3,28,],[5,5,]),'PR_fun':([3,4,6,8,28,58,177,261,],[-32,10,-9,10,-32,-8,-21,-25,]),'PR_main':([3,4,6,7,8,9,20,28,58,177,261,],[-32,-32,-9,19,-32,-20,-19,-32,-8,-21,-25,]),'PR_int':([5,10,48,57,176,],[12,12,12,12,12,]),'PR_float':([5,10,48,57,176,],[13,13,13,13,13,]),'PR_bool':([5,10,48,57,176,],[14,14,14,14,14,]),'PR_void':([5,10,48,57,176,],[15,15,15,15,15,]),'PR_rad':([5,10,48,57,176,],[16,16,16,16,16,]),'PR_degree':([5,10,48,57,176,],[17,17,17,17,17,]),'ID':([11,12,13,14,15,16,17,21,26,30,36,38,39,40,41,42,43,44,45,46,47,63,64,66,68,69,70,71,72,73,74,75,81,114,116,117,118,129,131,132,133,134,136,137,138,139,140,141,142,143,144,145,146,157,158,159,160,161,162,163,164,165,166,172,178,183,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,210,211,214,215,218,219,220,237,238,239,240,241,254,262,282,285,286,288,290,294,297,298,301,305,306,310,311,312,314,315,316,],[24,-2,-3,-4,-5,-6,-7,27,49,24,49,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,24,80,80,-32,-32,80,120,80,80,80,124,-32,-32,80,-88,80,-10,80,80,80,-76,80,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,80,80,80,80,80,80,80,80,80,80,80,49,-27,80,80,80,80,80,80,80,80,80,80,-32,-32,-32,-32,-32,80,-32,-116,-113,-117,-119,-118,80,80,80,80,80,80,80,-91,49,49,80,-32,-114,80,-92,-32,-87,-90,-115,-93,49,-32,-83,-86,]),'Token_Llave_Cerrado':([18,26,35,36,37,38,39,40,41,42,43,44,45,46,47,61,62,129,178,183,214,215,218,219,220,222,282,285,286,292,293,294,298,299,300,301,305,306,310,311,312,313,314,315,316,],[25,-32,61,-32,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-31,-33,-10,-32,-27,-116,-113,-117,-119,-118,261,-91,-32,-32,-32,301,-114,-92,304,-85,-32,-87,-90,-115,-93,-32,314,-32,-83,-86,]),'Token_Punto_Coma':([22,23,24,29,31,32,34,59,67,78,79,80,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,127,128,130,135,147,148,149,150,151,152,153,154,155,156,170,171,173,174,175,209,223,224,225,226,227,228,229,230,231,232,233,234,235,236,242,243,244,245,246,247,248,249,250,251,252,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,284,287,291,296,303,307,308,],[28,-32,-32,-11,-13,-14,-16,-12,-75,-32,129,-32,-45,-50,-32,-32,-32,-32,-32,-32,-32,-72,-73,-95,-96,-97,-98,-99,-100,-101,-102,-103,-15,-18,-65,183,-57,-78,-60,-79,-63,-80,-68,-69,-70,-71,214,215,218,219,220,-32,-17,-66,-26,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,-104,-105,-106,-107,-108,-109,-110,-111,-112,282,-94,-74,-77,-46,-82,-47,-48,-49,-51,-81,-52,-53,-54,-55,-56,-58,-59,-61,-62,-64,-32,294,298,-67,-32,310,311,]),'Token_Coma':([23,24,32,34,67,78,80,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,124,127,128,130,147,148,149,150,151,152,153,154,155,156,223,224,225,226,227,228,229,230,231,232,233,234,235,236,242,243,244,245,246,247,248,249,250,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,296,],[30,-32,-14,-16,-75,-32,-32,136,-45,-50,-32,-32,-32,-32,-32,-32,-32,-72,-73,-95,-96,-97,-98,-99,-100,-101,-102,-103,176,-15,-18,-65,-57,-78,-60,-79,-63,-80,-68,-69,-70,-71,-17,-66,-26,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,-104,-105,-106,-107,-108,-109,-110,-111,-112,-74,-77,-46,-82,-47,-48,-49,-51,-81,-52,-53,-54,-55,-56,-58,-59,-61,-62,-64,-67,]),'Token_Corchete_Abierto':([24,49,78,80,120,167,224,260,],[33,66,126,131,172,210,262,288,]),'PR_var':([26,36,38,39,40,41,42,43,44,45,46,47,129,178,183,214,215,218,219,220,282,285,286,294,298,301,305,306,310,311,312,314,315,316,],[48,48,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-10,48,-27,-116,-113,-117,-119,-118,-91,48,48,-114,-92,-32,-87,-90,-115,-93,48,-32,-83,-86,]),'PR_if':([26,36,38,39,40,41,42,43,44,45,46,47,129,178,183,214,215,218,219,220,282,285,286,294,298,301,305,306,310,311,312,314,315,316,],[50,50,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-10,50,-27,-116,-113,-117,-119,-118,-91,50,50,-114,-92,-32,-87,-90,-115,-93,50,-32,-83,-86,]),'PR_while':([26,36,38,39,40,41,42,43,44,45,46,47,129,178,183,214,215,218,219,220,282,285,286,294,298,301,305,306,310,311,312,314,315,316,],[51,51,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-10,51,-27,-116,-113,-117,-119,-118,-91,51,51,-114,-92,-32,-87,-90,-115,-93,51,-32,-83,-86,]),'PR_read':([26,36,38,39,40,41,42,43,44,45,46,47,129,178,183,214,215,218,219,220,282,285,286,294,298,301,305,306,310,311,312,314,315,316,],[52,52,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-10,52,-27,-116,-113,-117,-119,-118,-91,52,52,-114,-92,-32,-87,-90,-115,-93,52,-32,-83,-86,]),'PR_Write':([26,36,38,39,40,41,42,43,44,45,46,47,129,178,183,214,215,218,219,220,282,285,286,294,298,301,305,306,310,311,312,314,315,316,],[53,53,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-10,53,-27,-116,-113,-117,-119,-118,-91,53,53,-114,-92,-32,-87,-90,-115,-93,53,-32,-83,-86,]),'PR_graph':([26,36,38,39,40,41,42,43,44,45,46,47,129,178,183,214,215,218,219,220,282,285,286,294,298,301,305,306,310,311,312,314,315,316,],[54,54,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-10,54,-27,-116,-113,-117,-119,-118,-91,54,54,-114,-92,-32,-87,-90,-115,-93,54,-32,-83,-86,]),'PR_mapmat':([26,36,38,39,40,41,42,43,44,45,46,47,129,178,183,214,215,218,219,220,282,285,286,294,298,301,305,306,310,311,312,314,315,316,],[55,55,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-10,55,-27,-116,-113,-117,-119,-118,-91,55,55,-114,-92,-32,-87,-90,-115,-93,55,-32,-83,-86,]),'PR_normalizar':([26,36,38,39,40,41,42,43,44,45,46,47,129,178,183,214,215,218,219,220,282,285,286,294,298,301,305,306,310,311,312,314,315,316,],[56,56,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-10,56,-27,-116,-113,-117,-119,-118,-91,56,56,-114,-92,-32,-87,-90,-115,-93,56,-32,-83,-86,]),'Token_Parent_Abierto':([27,49,50,51,52,53,54,55,56,64,66,68,69,70,72,73,74,80,81,105,106,107,108,109,110,111,112,113,114,116,117,118,131,132,133,134,136,137,138,139,140,141,142,143,144,145,146,157,158,159,160,161,162,163,164,165,166,172,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,210,211,237,238,239,240,241,254,262,288,290,297,],[57,64,68,69,70,71,72,73,74,81,81,-32,-32,81,81,81,81,132,-32,157,158,159,160,161,162,163,164,165,-32,81,-88,81,81,81,81,-76,81,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,-32,-32,-32,-32,-32,81,-32,81,81,81,81,81,81,81,81,-32,81,]),'Token_Entero':([33,64,66,68,69,70,72,73,74,81,114,116,117,118,126,131,132,133,134,136,137,138,139,140,141,142,143,144,145,146,157,158,159,160,161,162,163,164,165,166,172,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,210,211,237,238,239,240,241,254,262,288,290,297,],[60,90,90,-32,-32,90,90,90,90,-32,-32,90,-88,90,179,90,90,90,-76,90,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,-32,-32,-32,-32,-32,90,-32,90,90,90,90,90,90,90,90,-32,90,]),'TOKEN_ASIGNA':([49,65,67,167,283,],[-32,114,-75,211,290,]),'Token_Parent_Cerrado':([57,64,67,76,77,80,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,119,120,121,122,123,124,130,132,136,147,148,149,150,151,152,153,154,155,156,168,169,176,181,182,184,200,201,202,203,204,205,206,207,208,221,224,225,226,227,228,229,230,231,232,233,234,235,236,242,243,244,245,246,247,248,249,250,259,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,296,302,],[-32,-32,-75,125,-24,-32,135,-28,-30,-45,-50,-32,-32,-32,-32,-32,-32,-32,-72,-73,-95,-96,-97,-98,-99,-100,-101,-102,-103,170,171,173,174,175,-22,-65,-32,-32,-57,-78,-60,-79,-63,-80,-68,-69,-70,-71,212,213,-32,225,226,-29,242,243,244,245,246,247,248,249,250,-23,-66,-26,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,-104,-105,-106,-107,-108,-109,-110,-111,-112,287,-74,-77,-46,-82,-47,-48,-49,-51,-81,-52,-53,-54,-55,-56,-58,-59,-61,-62,-64,-67,307,]),'Token_Corchete_Cerrado':([60,67,80,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,115,130,147,148,149,150,151,152,153,154,155,156,179,180,216,217,224,225,226,227,228,229,230,231,232,233,234,235,236,242,243,244,245,246,247,248,249,250,253,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,289,295,296,],[78,-75,-32,-45,-50,-32,-32,-32,-32,-32,-32,-32,-72,-73,-95,-96,-97,-98,-99,-100,-101,-102,-103,167,-65,-57,-78,-60,-79,-63,-80,-68,-69,-70,-71,223,224,259,260,-66,-26,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,-104,-105,-106,-107,-108,-109,-110,-111,-112,283,-74,-77,-46,-82,-47,-48,-49,-51,-81,-52,-53,-54,-55,-56,-58,-59,-61,-62,-64,296,302,-67,]),'Token_Float':([64,66,68,69,70,72,73,74,81,114,116,117,118,131,132,133,134,136,137,138,139,140,141,142,143,144,145,146,157,158,159,160,161,162,163,164,165,166,172,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,210,211,237,238,239,240,241,254,262,288,290,297,],[91,91,-32,-32,91,91,91,91,-32,-32,91,-88,91,91,91,91,-76,91,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,-32,-32,-32,-32,-32,91,-32,91,91,91,91,91,91,91,91,-32,91,]),'PR_true':([64,66,68,69,70,72,73,74,81,114,116,117,118,131,132,133,134,136,137,138,139,140,141,142,143,144,145,146,157,158,159,160,161,162,163,164,165,166,172,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,210,211,237,238,239,240,241,254,262,288,290,297,],[92,92,-32,-32,92,92,92,92,-32,-32,92,-88,92,92,92,92,-76,92,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,-32,-32,-32,-32,-32,92,-32,92,92,92,92,92,92,92,92,-32,92,]),'PR_false':([64,66,68,69,70,72,73,74,81,114,116,117,118,131,132,133,134,136,137,138,139,140,141,142,143,144,145,146,157,158,159,160,161,162,163,164,165,166,172,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,210,211,237,238,239,240,241,254,262,288,290,297,],[93,93,-32,-32,93,93,93,93,-32,-32,93,-88,93,93,93,93,-76,93,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,-32,-32,-32,-32,-32,93,-32,93,93,93,93,93,93,93,93,-32,93,]),'PR_sin':([64,66,68,69,70,72,73,74,81,114,116,117,118,131,132,133,134,136,137,138,139,140,141,142,143,144,145,146,157,158,159,160,161,162,163,164,165,166,172,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,210,211,237,238,239,240,241,254,262,288,290,297,],[105,105,-32,-32,105,105,105,105,-32,-32,105,-88,105,105,105,105,-76,105,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,-32,-32,-32,-32,-32,105,-32,105,105,105,105,105,105,105,105,-32,105,]),'PR_cos':([64,66,68,69,70,72,73,74,81,114,116,117,118,131,132,133,134,136,137,138,139,140,141,142,143,144,145,146,157,158,159,160,161,162,163,164,165,166,172,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,210,211,237,238,239,240,241,254,262,288,290,297,],[106,106,-32,-32,106,106,106,106,-32,-32,106,-88,106,106,106,106,-76,106,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,-32,-32,-32,-32,-32,106,-32,106,106,106,106,106,106,106,106,-32,106,]),'PR_tan':([64,66,68,69,70,72,73,74,81,114,116,117,118,131,132,133,134,136,137,138,139,140,141,142,143,144,145,146,157,158,159,160,161,162,163,164,165,166,172,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,210,211,237,238,239,240,241,254,262,288,290,297,],[107,107,-32,-32,107,107,107,107,-32,-32,107,-88,107,107,107,107,-76,107,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,-32,-32,-32,-32,-32,107,-32,107,107,107,107,107,107,107,107,-32,107,]),'PR_cotengent':([64,66,68,69,70,72,73,74,81,114,116,117,118,131,132,133,134,136,137,138,139,140,141,142,143,144,145,146,157,158,159,160,161,162,163,164,165,166,172,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,210,211,237,238,239,240,241,254,262,288,290,297,],[108,108,-32,-32,108,108,108,108,-32,-32,108,-88,108,108,108,108,-76,108,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,-32,-32,-32,-32,-32,108,-32,108,108,108,108,108,108,108,108,-32,108,]),'PR_cossecat':([64,66,68,69,70,72,73,74,81,114,116,117,118,131,132,133,134,136,137,138,139,140,141,142,143,144,145,146,157,158,159,160,161,162,163,164,165,166,172,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,210,211,237,238,239,240,241,254,262,288,290,297,],[109,109,-32,-32,109,109,109,109,-32,-32,109,-88,109,109,109,109,-76,109,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,-32,-32,-32,-32,-32,109,-32,109,109,109,109,109,109,109,109,-32,109,]),'PR_secant':([64,66,68,69,70,72,73,74,81,114,116,117,118,131,132,133,134,136,137,138,139,140,141,142,143,144,145,146,157,158,159,160,161,162,163,164,165,166,172,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,210,211,237,238,239,240,241,254,262,288,290,297,],[110,110,-32,-32,110,110,110,110,-32,-32,110,-88,110,110,110,110,-76,110,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,-32,-32,-32,-32,-32,110,-32,110,110,110,110,110,110,110,110,-32,110,]),'PR_seninv':([64,66,68,69,70,72,73,74,81,114,116,117,118,131,132,133,134,136,137,138,139,140,141,142,143,144,145,146,157,158,159,160,161,162,163,164,165,166,172,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,210,211,237,238,239,240,241,254,262,288,290,297,],[111,111,-32,-32,111,111,111,111,-32,-32,111,-88,111,111,111,111,-76,111,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,-32,-32,-32,-32,-32,111,-32,111,111,111,111,111,111,111,111,-32,111,]),'PR_cosinv':([64,66,68,69,70,72,73,74,81,114,116,117,118,131,132,133,134,136,137,138,139,140,141,142,143,144,145,146,157,158,159,160,161,162,163,164,165,166,172,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,210,211,237,238,239,240,241,254,262,288,290,297,],[112,112,-32,-32,112,112,112,112,-32,-32,112,-88,112,112,112,112,-76,112,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,-32,-32,-32,-32,-32,112,-32,112,112,112,112,112,112,112,112,-32,112,]),'PR_taninv':([64,66,68,69,70,72,73,74,81,114,116,117,118,131,132,133,134,136,137,138,139,140,141,142,143,144,145,146,157,158,159,160,161,162,163,164,165,166,172,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,210,211,237,238,239,240,241,254,262,288,290,297,],[113,113,-32,-32,113,113,113,113,-32,-32,113,-88,113,113,113,113,-76,113,-32,-32,-32,-32,-32,-32,-32,-32,-32,-32,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,-32,-32,-32,-32,-32,113,-32,113,113,113,113,113,113,113,113,-32,113,]),'TOKEN_POW':([67,80,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,130,151,152,153,154,155,156,224,225,226,242,243,244,245,246,247,248,249,250,263,264,296,],[-75,-32,-32,-32,-32,-32,-32,-72,-73,-95,-96,-97,-98,-99,-100,-101,-102,-103,-65,199,-80,-68,-69,-70,-71,-66,-26,-32,-104,-105,-106,-107,-108,-109,-110,-111,-112,-74,-77,-67,]),'TOKEN_MULTI':([67,80,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,130,149,150,151,152,153,154,155,156,224,225,226,242,243,244,245,246,247,248,249,250,263,264,281,296,],[-75,-32,-32,-32,-32,-32,-32,-32,-72,-73,-95,-96,-97,-98,-99,-100,-101,-102,-103,-65,197,-79,-63,-80,-68,-69,-70,-71,-66,-26,-32,-104,-105,-106,-107,-108,-109,-110,-111,-112,-74,-77,-64,-67,]),'TOKEN_DIVID':([67,80,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,130,149,150,151,152,153,154,155,156,224,225,226,242,243,244,245,246,247,248,249,250,263,264,281,296,],[-75,-32,-32,-32,-32,-32,-32,-32,-72,-73,-95,-96,-97,-98,-99,-100,-101,-102,-103,-65,198,-79,-63,-80,-68,-69,-70,-71,-66,-26,-32,-104,-105,-106,-107,-108,-109,-110,-111,-112,-74,-77,-64,-67,]),'Token_SUMA':([67,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,130,147,148,149,150,151,152,153,154,155,156,224,225,226,242,243,244,245,246,247,248,249,250,263,264,279,280,281,296,],[-75,-32,-32,-32,-32,-32,-32,-32,-32,-72,-73,-95,-96,-97,-98,-99,-100,-101,-102,-103,-65,195,-78,-60,-79,-63,-80,-68,-69,-70,-71,-66,-26,-32,-104,-105,-106,-107,-108,-109,-110,-111,-112,-74,-77,-61,-62,-64,-67,]),'Token_Resta':([67,80,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,130,147,148,149,150,151,152,153,154,155,156,224,225,226,242,243,244,245,246,247,248,249,250,263,264,279,280,281,296,],[-75,-32,-32,-32,-32,-32,-32,-32,-32,-72,-73,-95,-96,-97,-98,-99,-100,-101,-102,-103,-65,196,-78,-60,-79,-63,-80,-68,-69,-70,-71,-66,-26,-32,-104,-105,-106,-107,-108,-109,-110,-111,-112,-74,-77,-61,-62,-64,-67,]),'TOKEN_MAYOR':([67,80,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,130,147,148,149,150,151,152,153,154,155,156,217,224,225,226,242,243,244,245,246,247,248,249,250,263,264,277,278,279,280,281,296,],[-75,-32,141,-32,-32,-32,-32,-32,-32,-32,-72,-73,-95,-96,-97,-98,-99,-100,-101,-102,-103,-65,-57,-78,-60,-79,-63,-80,-68,-69,-70,-71,141,-66,-26,-32,-104,-105,-106,-107,-108,-109,-110,-111,-112,-74,-77,-58,-59,-61,-62,-64,-67,]),'TOKEN_MENOR':([67,80,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,130,147,148,149,150,151,152,153,154,155,156,217,224,225,226,242,243,244,245,246,247,248,249,250,263,264,277,278,279,280,281,296,],[-75,-32,142,-32,-32,-32,-32,-32,-32,-32,-72,-73,-95,-96,-97,-98,-99,-100,-101,-102,-103,-65,-57,-78,-60,-79,-63,-80,-68,-69,-70,-71,142,-66,-26,-32,-104,-105,-106,-107,-108,-109,-110,-111,-112,-74,-77,-58,-59,-61,-62,-64,-67,]),'TOKEN_MAYOR_IG':([67,80,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,130,147,148,149,150,151,152,153,154,155,156,217,224,225,226,242,243,244,245,246,247,248,249,250,263,264,277,278,279,280,281,296,],[-75,-32,143,-32,-32,-32,-32,-32,-32,-32,-72,-73,-95,-96,-97,-98,-99,-100,-101,-102,-103,-65,-57,-78,-60,-79,-63,-80,-68,-69,-70,-71,143,-66,-26,-32,-104,-105,-106,-107,-108,-109,-110,-111,-112,-74,-77,-58,-59,-61,-62,-64,-67,]),'TOKEN_MENOR_IG':([67,80,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,130,147,148,149,150,151,152,153,154,155,156,217,224,225,226,242,243,244,245,246,247,248,249,250,263,264,277,278,279,280,281,296,],[-75,-32,144,-32,-32,-32,-32,-32,-32,-32,-72,-73,-95,-96,-97,-98,-99,-100,-101,-102,-103,-65,-57,-78,-60,-79,-63,-80,-68,-69,-70,-71,144,-66,-26,-32,-104,-105,-106,-107,-108,-109,-110,-111,-112,-74,-77,-58,-59,-61,-62,-64,-67,]),'TOKEN_COMPARA':([67,80,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,130,147,148,149,150,151,152,153,154,155,156,217,224,225,226,242,243,244,245,246,247,248,249,250,263,264,277,278,279,280,281,296,],[-75,-32,145,-32,-32,-32,-32,-32,-32,-32,-72,-73,-95,-96,-97,-98,-99,-100,-101,-102,-103,-65,-57,-78,-60,-79,-63,-80,-68,-69,-70,-71,145,-66,-26,-32,-104,-105,-106,-107,-108,-109,-110,-111,-112,-74,-77,-58,-59,-61,-62,-64,-67,]),'TOKEN_NO_IGUAL':([67,80,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,130,147,148,149,150,151,152,153,154,155,156,217,224,225,226,242,243,244,245,246,247,248,249,250,263,264,277,278,279,280,281,296,],[-75,-32,146,-32,-32,-32,-32,-32,-32,-32,-72,-73,-95,-96,-97,-98,-99,-100,-101,-102,-103,-65,-57,-78,-60,-79,-63,-80,-68,-69,-70,-71,146,-66,-26,-32,-104,-105,-106,-107,-108,-109,-110,-111,-112,-74,-77,-58,-59,-61,-62,-64,-67,]),'PR_and':([67,80,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,130,147,148,149,150,151,152,153,154,155,156,217,224,225,226,231,232,233,234,235,236,242,243,244,245,246,247,248,249,250,263,264,270,271,272,273,274,275,276,277,278,279,280,281,296,],[-75,-32,137,-50,-32,-32,-32,-32,-32,-32,-32,-72,-73,-95,-96,-97,-98,-99,-100,-101,-102,-103,-65,-57,-78,-60,-79,-63,-80,-68,-69,-70,-71,-50,-66,-26,-32,-32,-32,-32,-32,-32,-32,-104,-105,-106,-107,-108,-109,-110,-111,-112,-74,-77,-51,-81,-52,-53,-54,-55,-56,-58,-59,-61,-62,-64,-67,]),'PR_or':([67,80,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,130,147,148,149,150,151,152,153,154,155,156,217,224,225,226,231,232,233,234,235,236,242,243,244,245,246,247,248,249,250,263,264,270,271,272,273,274,275,276,277,278,279,280,281,296,],[-75,-32,138,-50,-32,-32,-32,-32,-32,-32,-32,-72,-73,-95,-96,-97,-98,-99,-100,-101,-102,-103,-65,-57,-78,-60,-79,-63,-80,-68,-69,-70,-71,-50,-66,-26,-32,-32,-32,-32,-32,-32,-32,-104,-105,-106,-107,-108,-109,-110,-111,-112,-74,-77,-51,-81,-52,-53,-54,-55,-56,-58,-59,-61,-62,-64,-67,]),'Token_And':([67,80,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,130,147,148,149,150,151,152,153,154,155,156,217,224,225,226,231,232,233,234,235,236,242,243,244,245,246,247,248,249,250,263,264,270,271,272,273,274,275,276,277,278,279,280,281,296,],[-75,-32,139,-50,-32,-32,-32,-32,-32,-32,-32,-72,-73,-95,-96,-97,-98,-99,-100,-101,-102,-103,-65,-57,-78,-60,-79,-63,-80,-68,-69,-70,-71,-50,-66,-26,-32,-32,-32,-32,-32,-32,-32,-104,-105,-106,-107,-108,-109,-110,-111,-112,-74,-77,-51,-81,-52,-53,-54,-55,-56,-58,-59,-61,-62,-64,-67,]),'Token_Or':([67,80,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,130,147,148,149,150,151,152,153,154,155,156,217,224,225,226,231,232,233,234,235,236,242,243,244,245,246,247,248,249,250,263,264,270,271,272,273,274,275,276,277,278,279,280,281,296,],[-75,-32,140,-50,-32,-32,-32,-32,-32,-32,-32,-72,-73,-95,-96,-97,-98,-99,-100,-101,-102,-103,-65,-57,-78,-60,-79,-63,-80,-68,-69,-70,-71,-50,-66,-26,-32,-32,-32,-32,-32,-32,-32,-104,-105,-106,-107,-108,-109,-110,-111,-112,-74,-77,-51,-81,-52,-53,-54,-55,-56,-58,-59,-61,-62,-64,-67,]),'PR_else':([304,],[309,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'globalVar':([3,28,],[4,58,]),'empty':([3,4,8,23,24,26,28,36,49,57,64,68,69,78,80,81,87,88,89,90,91,92,93,114,132,136,137,138,139,140,141,142,143,144,145,146,176,178,195,196,197,198,199,209,211,212,213,226,227,228,229,230,231,232,233,234,235,236,284,285,286,290,292,301,303,312,314,],[6,9,9,31,34,37,6,37,67,77,84,117,117,128,67,134,148,150,152,67,67,67,67,134,84,84,134,134,134,134,134,134,134,134,134,134,77,37,134,134,134,134,134,252,134,256,258,264,266,266,266,266,271,271,271,271,271,271,252,37,37,134,300,306,252,37,316,]),'BlockFun':([4,8,],[7,20,]),'fun':([4,8,],[8,8,]),'tipo':([5,10,48,57,176,],[11,21,63,75,75,]),'MainBlock':([7,],[18,]),'decVar':([11,30,63,],[22,59,79,]),'varNom':([11,30,63,],[23,23,23,]),'decVar2':([23,],[29,]),'arr1':([24,],[32,]),'bloque':([26,36,178,285,286,312,],[35,62,222,292,293,313,]),'statements':([26,36,178,285,286,312,],[36,36,36,36,36,36,]),'var':([26,36,178,285,286,312,],[38,38,38,38,38,38,]),'funCallVoid':([26,36,178,285,286,312,],[39,39,39,39,39,39,]),'Conditions':([26,36,178,285,286,312,],[40,40,40,40,40,40,]),'ciclos':([26,36,178,285,286,312,],[41,41,41,41,41,41,]),'asigna':([26,36,178,285,286,312,],[42,42,42,42,42,42,]),'read':([26,36,178,285,286,312,],[43,43,43,43,43,43,]),'write':([26,36,178,285,286,312,],[44,44,44,44,44,44,]),'GRAPH':([26,36,178,285,286,312,],[45,45,45,45,45,45,]),'map':([26,36,178,285,286,312,],[46,46,46,46,46,46,]),'NORMALIZAR':([26,36,178,285,286,312,],[47,47,47,47,47,47,]),'CuadruploMiniExp':([49,80,90,91,92,93,],[65,130,153,154,155,156,]),'params':([57,176,],[76,221,]),'paramsCall':([64,132,136,],[82,181,184,]),'SuperExp':([64,70,72,73,74,116,118,132,133,136,157,158,159,160,161,162,163,164,165,166,172,185,186,187,188,254,297,],[83,119,121,122,123,168,169,83,182,83,200,201,202,203,204,205,206,207,208,209,216,227,228,229,230,284,303,]),'Exp':([64,70,72,73,74,116,118,132,133,136,157,158,159,160,161,162,163,164,165,166,172,185,186,187,188,254,297,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'miniExp':([64,66,70,72,73,74,116,118,131,132,133,136,157,158,159,160,161,162,163,164,165,166,172,185,186,187,188,189,190,191,192,193,194,210,237,238,254,262,288,297,],[86,115,86,86,86,86,86,86,180,86,86,86,86,86,86,86,86,86,86,86,86,86,217,86,86,86,86,231,232,233,234,235,236,253,277,278,86,289,295,86,]),'microExp':([64,66,70,72,73,74,116,118,131,132,133,136,157,158,159,160,161,162,163,164,165,166,172,185,186,187,188,189,190,191,192,193,194,210,237,238,239,240,254,262,288,297,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,279,280,87,87,87,87,]),'minimicroExp':([64,66,70,72,73,74,116,118,131,132,133,136,157,158,159,160,161,162,163,164,165,166,172,185,186,187,188,189,190,191,192,193,194,210,237,238,239,240,241,254,262,288,297,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,281,88,88,88,88,]),'conjunto':([64,66,70,72,73,74,116,118,131,132,133,136,157,158,159,160,161,162,163,164,165,166,172,185,186,187,188,189,190,191,192,193,194,210,237,238,239,240,241,254,262,288,297,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'funCall':([64,66,70,72,73,74,116,118,131,132,133,136,157,158,159,160,161,162,163,164,165,166,172,185,186,187,188,189,190,191,192,193,194,210,237,238,239,240,241,254,262,288,297,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'llamada':([64,66,70,72,73,74,116,118,131,132,133,136,157,158,159,160,161,162,163,164,165,166,172,185,186,187,188,189,190,191,192,193,194,210,237,238,239,240,241,254,262,288,297,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'sin':([64,66,70,72,73,74,116,118,131,132,133,136,157,158,159,160,161,162,163,164,165,166,172,185,186,187,188,189,190,191,192,193,194,210,237,238,239,240,241,254,262,288,297,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'cos':([64,66,70,72,73,74,116,118,131,132,133,136,157,158,159,160,161,162,163,164,165,166,172,185,186,187,188,189,190,191,192,193,194,210,237,238,239,240,241,254,262,288,297,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'tan':([64,66,70,72,73,74,116,118,131,132,133,136,157,158,159,160,161,162,163,164,165,166,172,185,186,187,188,189,190,191,192,193,194,210,237,238,239,240,241,254,262,288,297,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'COTANGENT':([64,66,70,72,73,74,116,118,131,132,133,136,157,158,159,160,161,162,163,164,165,166,172,185,186,187,188,189,190,191,192,193,194,210,237,238,239,240,241,254,262,288,297,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'COSECANT':([64,66,70,72,73,74,116,118,131,132,133,136,157,158,159,160,161,162,163,164,165,166,172,185,186,187,188,189,190,191,192,193,194,210,237,238,239,240,241,254,262,288,297,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'SECANT':([64,66,70,72,73,74,116,118,131,132,133,136,157,158,159,160,161,162,163,164,165,166,172,185,186,187,188,189,190,191,192,193,194,210,237,238,239,240,241,254,262,288,297,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'sininv':([64,66,70,72,73,74,116,118,131,132,133,136,157,158,159,160,161,162,163,164,165,166,172,185,186,187,188,189,190,191,192,193,194,210,237,238,239,240,241,254,262,288,297,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'cosinv':([64,66,70,72,73,74,116,118,131,132,133,136,157,158,159,160,161,162,163,164,165,166,172,185,186,187,188,189,190,191,192,193,194,210,237,238,239,240,241,254,262,288,297,],[103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'taninv':([64,66,70,72,73,74,116,118,131,132,133,136,157,158,159,160,161,162,163,164,165,166,172,185,186,187,188,189,190,191,192,193,194,210,237,238,239,240,241,254,262,288,297,],[104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,]),'CuadruploSaltosINI':([68,69,],[116,118,]),'arr2':([78,],[127,]),'CuadruploOpp':([81,114,137,138,139,140,141,142,143,144,145,146,195,196,197,198,199,211,290,],[133,166,185,186,187,188,189,190,191,192,193,194,237,238,239,240,241,254,297,]),'CuadruplosCrea':([87,],[147,]),'CuadruplosCreaMult':([88,],[149,]),'CuadruplosCreaPow':([89,],[151,]),'funBlock':([125,],[177,]),'CuadruplosAsigna':([209,284,303,],[251,291,308,]),'CuadruploCon':([212,],[255,]),'CuadruploCiclos':([213,],[257,]),'CuadruploOppPop':([226,],[263,]),'CuadruplosCreaANDOR':([227,228,229,230,],[265,267,268,269,]),'CuadruplosCreaCompara':([231,232,233,234,235,236,],[270,272,273,274,275,276,]),'CuadruploConEnd':([292,],[299,]),'CuadruploCiclosEnd':([301,],[305,]),'CuadruplosFinal':([314,],[315,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> PR_Program Token_Llave_Abierta globalVar BlockFun MainBlock Token_Llave_Cerrado','prog',6,'p_progama','Entrega1.py',125),
  ('tipo -> PR_int','tipo',1,'p_tipo','Entrega1.py',129),
  ('tipo -> PR_float','tipo',1,'p_tipo','Entrega1.py',130),
  ('tipo -> PR_bool','tipo',1,'p_tipo','Entrega1.py',131),
  ('tipo -> PR_void','tipo',1,'p_tipo','Entrega1.py',132),
  ('tipo -> PR_rad','tipo',1,'p_tipo','Entrega1.py',133),
  ('tipo -> PR_degree','tipo',1,'p_tipo','Entrega1.py',134),
  ('globalVar -> PR_globalVar tipo decVar Token_Punto_Coma globalVar','globalVar',5,'p_globalVar','Entrega1.py',140),
  ('globalVar -> empty','globalVar',1,'p_globalVar','Entrega1.py',141),
  ('var -> PR_var tipo decVar Token_Punto_Coma','var',4,'p_var','Entrega1.py',146),
  ('decVar -> varNom decVar2','decVar',2,'p_decVar','Entrega1.py',149),
  ('decVar2 -> Token_Coma decVar','decVar2',2,'p_decVar2','Entrega1.py',153),
  ('decVar2 -> empty','decVar2',1,'p_decVar2','Entrega1.py',154),
  ('varNom -> ID arr1','varNom',2,'p_varNom','Entrega1.py',159),
  ('arr1 -> Token_Corchete_Abierto Token_Entero Token_Corchete_Cerrado arr2','arr1',4,'p_varNom','Entrega1.py',160),
  ('arr1 -> empty','arr1',1,'p_varNom','Entrega1.py',161),
  ('arr2 -> Token_Corchete_Abierto Token_Entero Token_Corchete_Cerrado','arr2',3,'p_varNom','Entrega1.py',162),
  ('arr2 -> empty','arr2',1,'p_varNom','Entrega1.py',163),
  ('BlockFun -> fun BlockFun','BlockFun',2,'p_BlockFun','Entrega1.py',170),
  ('BlockFun -> empty','BlockFun',1,'p_BlockFun','Entrega1.py',171),
  ('fun -> PR_fun tipo ID Token_Parent_Abierto params Token_Parent_Cerrado funBlock','fun',7,'p_fun','Entrega1.py',175),
  ('params -> tipo ID','params',2,'p_params','Entrega1.py',178),
  ('params -> tipo ID Token_Coma params','params',4,'p_params','Entrega1.py',179),
  ('params -> empty','params',1,'p_params','Entrega1.py',180),
  ('funBlock -> Token_Llave_Abierta bloque Token_Llave_Cerrado','funBlock',3,'p_funBlock','Entrega1.py',184),
  ('funCall -> ID Token_Parent_Abierto paramsCall Token_Parent_Cerrado','funCall',4,'p_funCall','Entrega1.py',188),
  ('funCallVoid -> ID Token_Parent_Abierto paramsCall Token_Parent_Cerrado Token_Punto_Coma','funCallVoid',5,'p_funCallVoid','Entrega1.py',191),
  ('paramsCall -> SuperExp','paramsCall',1,'p_paramsCall','Entrega1.py',194),
  ('paramsCall -> SuperExp Token_Coma paramsCall','paramsCall',3,'p_paramsCall','Entrega1.py',195),
  ('paramsCall -> empty','paramsCall',1,'p_paramsCall','Entrega1.py',196),
  ('MainBlock -> PR_main Token_Llave_Abierta bloque Token_Llave_Cerrado','MainBlock',4,'p_mainBlock','Entrega1.py',202),
  ('empty -> <empty>','empty',0,'p_empty','Entrega1.py',207),
  ('bloque -> statements bloque','bloque',2,'p_block','Entrega1.py',217),
  ('bloque -> empty','bloque',1,'p_block','Entrega1.py',218),
  ('statements -> var','statements',1,'p_statments','Entrega1.py',221),
  ('statements -> funCallVoid','statements',1,'p_statments','Entrega1.py',222),
  ('statements -> Conditions','statements',1,'p_statments','Entrega1.py',223),
  ('statements -> ciclos','statements',1,'p_statments','Entrega1.py',224),
  ('statements -> asigna','statements',1,'p_statments','Entrega1.py',225),
  ('statements -> read','statements',1,'p_statments','Entrega1.py',226),
  ('statements -> write','statements',1,'p_statments','Entrega1.py',227),
  ('statements -> GRAPH','statements',1,'p_statments','Entrega1.py',228),
  ('statements -> map','statements',1,'p_statments','Entrega1.py',229),
  ('statements -> NORMALIZAR','statements',1,'p_statments','Entrega1.py',230),
  ('SuperExp -> Exp','SuperExp',1,'p_SuperExp','Entrega1.py',236),
  ('SuperExp -> Exp PR_and CuadruploOpp SuperExp CuadruplosCreaANDOR','SuperExp',5,'p_SuperExp','Entrega1.py',237),
  ('SuperExp -> Exp PR_or CuadruploOpp SuperExp CuadruplosCreaANDOR','SuperExp',5,'p_SuperExp','Entrega1.py',238),
  ('SuperExp -> Exp Token_And CuadruploOpp SuperExp CuadruplosCreaANDOR','SuperExp',5,'p_SuperExp','Entrega1.py',239),
  ('SuperExp -> Exp Token_Or CuadruploOpp SuperExp CuadruplosCreaANDOR','SuperExp',5,'p_SuperExp','Entrega1.py',240),
  ('Exp -> miniExp','Exp',1,'p_Exp','Entrega1.py',242),
  ('Exp -> miniExp TOKEN_MAYOR CuadruploOpp miniExp CuadruplosCreaCompara','Exp',5,'p_Exp','Entrega1.py',243),
  ('Exp -> miniExp TOKEN_MENOR CuadruploOpp miniExp CuadruplosCreaCompara','Exp',5,'p_Exp','Entrega1.py',244),
  ('Exp -> miniExp TOKEN_MAYOR_IG CuadruploOpp miniExp CuadruplosCreaCompara','Exp',5,'p_Exp','Entrega1.py',245),
  ('Exp -> miniExp TOKEN_MENOR_IG CuadruploOpp miniExp CuadruplosCreaCompara','Exp',5,'p_Exp','Entrega1.py',246),
  ('Exp -> miniExp TOKEN_COMPARA CuadruploOpp miniExp CuadruplosCreaCompara','Exp',5,'p_Exp','Entrega1.py',247),
  ('Exp -> miniExp TOKEN_NO_IGUAL CuadruploOpp miniExp CuadruplosCreaCompara','Exp',5,'p_Exp','Entrega1.py',248),
  ('miniExp -> microExp CuadruplosCrea','miniExp',2,'p_miniExp','Entrega1.py',251),
  ('miniExp -> microExp CuadruplosCrea Token_SUMA CuadruploOpp miniExp','miniExp',5,'p_miniExp','Entrega1.py',252),
  ('miniExp -> microExp CuadruplosCrea Token_Resta CuadruploOpp miniExp','miniExp',5,'p_miniExp','Entrega1.py',253),
  ('microExp -> minimicroExp CuadruplosCreaMult','microExp',2,'p_microExp','Entrega1.py',258),
  ('microExp -> minimicroExp CuadruplosCreaMult TOKEN_MULTI CuadruploOpp microExp','microExp',5,'p_microExp','Entrega1.py',259),
  ('microExp -> minimicroExp CuadruplosCreaMult TOKEN_DIVID CuadruploOpp microExp','microExp',5,'p_microExp','Entrega1.py',260),
  ('minimicroExp -> conjunto CuadruplosCreaPow','minimicroExp',2,'p_minimicroExp','Entrega1.py',263),
  ('minimicroExp -> conjunto CuadruplosCreaPow TOKEN_POW CuadruploOpp minimicroExp','minimicroExp',5,'p_minimicroExp','Entrega1.py',264),
  ('conjunto -> ID CuadruploMiniExp','conjunto',2,'p_conjunto','Entrega1.py',267),
  ('conjunto -> ID Token_Corchete_Abierto miniExp Token_Corchete_Cerrado','conjunto',4,'p_conjunto','Entrega1.py',268),
  ('conjunto -> ID Token_Corchete_Abierto miniExp Token_Corchete_Cerrado Token_Corchete_Abierto miniExp Token_Corchete_Cerrado','conjunto',7,'p_conjunto','Entrega1.py',269),
  ('conjunto -> Token_Entero CuadruploMiniExp','conjunto',2,'p_conjunto','Entrega1.py',270),
  ('conjunto -> Token_Float CuadruploMiniExp','conjunto',2,'p_conjunto','Entrega1.py',271),
  ('conjunto -> PR_true CuadruploMiniExp','conjunto',2,'p_conjunto','Entrega1.py',272),
  ('conjunto -> PR_false CuadruploMiniExp','conjunto',2,'p_conjunto','Entrega1.py',273),
  ('conjunto -> funCall','conjunto',1,'p_conjunto','Entrega1.py',274),
  ('conjunto -> llamada','conjunto',1,'p_conjunto','Entrega1.py',275),
  ('conjunto -> Token_Parent_Abierto CuadruploOpp SuperExp Token_Parent_Cerrado CuadruploOppPop','conjunto',5,'p_conjunto','Entrega1.py',276),
  ('CuadruploMiniExp -> empty','CuadruploMiniExp',1,'p_CuadruploMiniExp','Entrega1.py',279),
  ('CuadruploOpp -> empty','CuadruploOpp',1,'p_CuadruploOpp','Entrega1.py',283),
  ('CuadruploOppPop -> empty','CuadruploOppPop',1,'p_CuadruploOppPop','Entrega1.py',287),
  ('CuadruplosCrea -> empty','CuadruplosCrea',1,'p_CuadruploCrea','Entrega1.py',291),
  ('CuadruplosCreaMult -> empty','CuadruplosCreaMult',1,'p_CuadruploCreaMult','Entrega1.py',303),
  ('CuadruplosCreaPow -> empty','CuadruplosCreaPow',1,'p_CuadruploCreaPow','Entrega1.py',315),
  ('CuadruplosCreaCompara -> empty','CuadruplosCreaCompara',1,'p_CuadruploCreaCompara','Entrega1.py',327),
  ('CuadruplosCreaANDOR -> empty','CuadruplosCreaANDOR',1,'p_CuadruploCreaANDOR','Entrega1.py',340),
  ('Conditions -> PR_if Token_Parent_Abierto CuadruploSaltosINI SuperExp Token_Parent_Cerrado CuadruploCon Token_Llave_Abierta bloque CuadruploConEnd Token_Llave_Cerrado PR_else Token_Llave_Abierta bloque Token_Llave_Cerrado CuadruplosFinal','Conditions',15,'p_condition','Entrega1.py',357),
  ('CuadruploCon -> empty','CuadruploCon',1,'p_CuadruploCon','Entrega1.py',360),
  ('CuadruploConEnd -> empty','CuadruploConEnd',1,'p_CuadruploConEnd','Entrega1.py',369),
  ('CuadruplosFinal -> empty','CuadruplosFinal',1,'p_CuadruplosFinal','Entrega1.py',377),
  ('ciclos -> PR_while Token_Parent_Abierto CuadruploSaltosINI SuperExp Token_Parent_Cerrado CuadruploCiclos Token_Llave_Abierta bloque Token_Llave_Cerrado CuadruploCiclosEnd','ciclos',10,'p_ciclos','Entrega1.py',383),
  ('CuadruploSaltosINI -> empty','CuadruploSaltosINI',1,'p_CuadruploSaltosINI','Entrega1.py',386),
  ('CuadruploCiclos -> empty','CuadruploCiclos',1,'p_CuadruploCiclos','Entrega1.py',391),
  ('CuadruploCiclosEnd -> empty','CuadruploCiclosEnd',1,'p_CuadruploCiclosEnd','Entrega1.py',397),
  ('asigna -> ID CuadruploMiniExp TOKEN_ASIGNA CuadruploOpp SuperExp CuadruplosAsigna Token_Punto_Coma','asigna',7,'p_asignaciones','Entrega1.py',410),
  ('asigna -> ID Token_Corchete_Abierto miniExp Token_Corchete_Cerrado TOKEN_ASIGNA CuadruploOpp SuperExp CuadruplosAsigna Token_Punto_Coma','asigna',9,'p_asignaciones','Entrega1.py',411),
  ('asigna -> ID Token_Corchete_Abierto miniExp Token_Corchete_Cerrado Token_Corchete_Abierto miniExp Token_Corchete_Cerrado TOKEN_ASIGNA CuadruploOpp SuperExp CuadruplosAsigna Token_Punto_Coma','asigna',12,'p_asignaciones','Entrega1.py',412),
  ('CuadruplosAsigna -> empty','CuadruplosAsigna',1,'p_CuadruploAsigna','Entrega1.py',415),
  ('llamada -> sin','llamada',1,'p_llamada','Entrega1.py',427),
  ('llamada -> cos','llamada',1,'p_llamada','Entrega1.py',428),
  ('llamada -> tan','llamada',1,'p_llamada','Entrega1.py',429),
  ('llamada -> COTANGENT','llamada',1,'p_llamada','Entrega1.py',430),
  ('llamada -> COSECANT','llamada',1,'p_llamada','Entrega1.py',431),
  ('llamada -> SECANT','llamada',1,'p_llamada','Entrega1.py',432),
  ('llamada -> sininv','llamada',1,'p_llamada','Entrega1.py',433),
  ('llamada -> cosinv','llamada',1,'p_llamada','Entrega1.py',434),
  ('llamada -> taninv','llamada',1,'p_llamada','Entrega1.py',435),
  ('sin -> PR_sin Token_Parent_Abierto SuperExp Token_Parent_Cerrado','sin',4,'p_sin','Entrega1.py',438),
  ('cos -> PR_cos Token_Parent_Abierto SuperExp Token_Parent_Cerrado','cos',4,'p_cos','Entrega1.py',441),
  ('tan -> PR_tan Token_Parent_Abierto SuperExp Token_Parent_Cerrado','tan',4,'p_tan','Entrega1.py',444),
  ('COTANGENT -> PR_cotengent Token_Parent_Abierto SuperExp Token_Parent_Cerrado','COTANGENT',4,'p_cotan','Entrega1.py',447),
  ('COSECANT -> PR_cossecat Token_Parent_Abierto SuperExp Token_Parent_Cerrado','COSECANT',4,'p_cosecant','Entrega1.py',450),
  ('SECANT -> PR_secant Token_Parent_Abierto SuperExp Token_Parent_Cerrado','SECANT',4,'p_secant','Entrega1.py',454),
  ('sininv -> PR_seninv Token_Parent_Abierto SuperExp Token_Parent_Cerrado','sininv',4,'p_sininv','Entrega1.py',457),
  ('cosinv -> PR_cosinv Token_Parent_Abierto SuperExp Token_Parent_Cerrado','cosinv',4,'p_cosinv','Entrega1.py',460),
  ('taninv -> PR_taninv Token_Parent_Abierto SuperExp Token_Parent_Cerrado','taninv',4,'p_taninv','Entrega1.py',463),
  ('write -> PR_Write Token_Parent_Abierto ID Token_Parent_Cerrado Token_Punto_Coma','write',5,'p_write','Entrega1.py',466),
  ('write -> PR_Write Token_Parent_Abierto ID Token_Corchete_Abierto SuperExp Token_Corchete_Cerrado Token_Parent_Cerrado Token_Punto_Coma','write',8,'p_write','Entrega1.py',467),
  ('write -> PR_Write Token_Parent_Abierto ID Token_Corchete_Abierto miniExp Token_Corchete_Cerrado Token_Corchete_Abierto miniExp Token_Corchete_Cerrado Token_Parent_Cerrado Token_Punto_Coma','write',11,'p_write','Entrega1.py',468),
  ('read -> PR_read Token_Parent_Abierto SuperExp Token_Parent_Cerrado Token_Punto_Coma','read',5,'p_read','Entrega1.py',471),
  ('GRAPH -> PR_graph Token_Parent_Abierto SuperExp Token_Parent_Cerrado Token_Punto_Coma','GRAPH',5,'p_graf','Entrega1.py',474),
  ('NORMALIZAR -> PR_normalizar Token_Parent_Abierto SuperExp Token_Parent_Cerrado Token_Punto_Coma','NORMALIZAR',5,'p_NORM','Entrega1.py',477),
  ('map -> PR_mapmat Token_Parent_Abierto SuperExp Token_Parent_Cerrado Token_Punto_Coma','map',5,'p_map','Entrega1.py',480),
]
